

========================================
FILE: ./app.py
========================================

# backend/app.py

from flask import Flask
from flask_cors import CORS
from dotenv import load_dotenv

# Load .env (SUPABASE_URL, SUPABASE_KEY, ALPHA_VANTAGE_KEY, etc.)
load_dotenv()

from routes.health import health_bp
from routes.recommend import recommend_bp
from routes.onboarding import onboard_bp
from routes.chat import chat_bp

app = Flask(__name__)
CORS(app)

# Existing endpoints
app.register_blueprint(health_bp)
app.register_blueprint(recommend_bp)
app.register_blueprint(onboard_bp)
app.register_blueprint(chat_bp)

@app.route("/")
def home():
    return {"message": "Finora backend is running"}

if __name__ == "__main__":
    app.run(debug=True, port=5000)

----------------------------------------



========================================
FILE: ./routes/health.py
========================================

# backend/routes/health.py

from flask import Blueprint, jsonify

health_bp = Blueprint("health", __name__)

@health_bp.route("/health", methods=["GET"])
def health():
    return jsonify(status="ok", service="Finora backend")

----------------------------------------



========================================
FILE: ./routes/onboarding.py
========================================

# backend/routes/onboarding.py

from flask import Blueprint, request, jsonify
from services.onboarding_service import create_profile, get_profile, delete_profile

onboard_bp = Blueprint("onboard", __name__)

@onboard_bp.route("/onboard", methods=["POST"])
def onboard():
    data = request.get_json() or {}
    required = ["age", "income_range", "investment_goal", "monthly_amount", "risk_appetite"]
    missing = [f for f in required if f not in data]
    if missing:
        return jsonify({"error": f"Missing fields: {', '.join(missing)}"}), 400

    payload = {
        "age": data["age"],
        "income_range": data["income_range"],
        "investment_goal": data["investment_goal"],
        "monthly_amount": data["monthly_amount"],
        "risk_appetite": data["risk_appetite"],
    }

    try:
        profile_id = create_profile(payload)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

    return jsonify({"status": "ok", "profile_id": profile_id}), 201


@onboard_bp.route("/onboard/<int:profile_id>", methods=["GET"])
def fetch_onboard(profile_id):
    profile = get_profile(profile_id)
    if not profile:
        return jsonify({"error": "Profile not found"}), 404
    return jsonify(profile)


@onboard_bp.route("/onboard/<int:profile_id>", methods=["DELETE"])
def delete_onboard(profile_id):
    success = delete_profile(profile_id)
    if not success:
        return jsonify({"error": "Profile not found or deletion failed"}), 404
    return jsonify({"status": "deleted", "profile_id": profile_id}), 200

----------------------------------------



========================================
FILE: ./routes/__init__.py
========================================



----------------------------------------



========================================
FILE: ./routes/recommend.py
========================================

# backend/routes/recommend.py

from flask import Blueprint, request, jsonify
from services.recommendation_service import recommend_portfolio

recommend_bp = Blueprint("recommend", __name__)

@recommend_bp.route("/recommend", methods=["POST"])
def recommend():
    data = request.get_json() or {}

    # 1) Parse inputs
    risk = data.get("risk_level", "medium")
    total_amount = float(data.get("investment_amount", 0))

    # 2) Delegate recommendation logic to service
    result = recommend_portfolio(risk, total_amount)

    # 3) Return full recommendation payload as JSON
    return jsonify(result)

----------------------------------------



========================================
FILE: ./routes/chat.py
========================================

# backend/routes/chat.py

from flask import Blueprint, request, jsonify
from services.llm_service import chat_with_model

chat_bp = Blueprint("chat", __name__)

@chat_bp.route("/chat", methods=["POST"])
def chat():
    data = request.get_json() or {}
    user_input = data.get("message")
    if not user_input:
        return jsonify({"error": "Missing 'message' field"}), 400
    try:
        reply = chat_with_model(user_input)
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    return jsonify({"reply": reply})

----------------------------------------



========================================
FILE: ./services/__init__.py
========================================



----------------------------------------



========================================
FILE: ./services/llm_service.py
========================================

# backend/services/llm_service.py

import os
from openai import OpenAI
from dotenv import load_dotenv

# Load .env so OPENAI_API_KEY is available
load_dotenv()

# Instantiate a client (picks up OPENAI_API_KEY or you can pass api_key=...)
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def _load_system_prompt() -> str:
    return (
        "You are Finora, a helpful and knowledgeable financial advisor. "
        "Respond concisely, clearly, and professionally to user queries "
        "about investments, ETFs, allocation, and risk management."
    )

def chat_with_model(user_message: str) -> str:
    """
    Send a user message to the LLM via the new v1.x interface and return its reply.
    """
    system_prompt = _load_system_prompt()
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user",   "content": user_message}
    ]

    # Use the new chat completion call
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.7,
        max_tokens=500
    )

    # Extract and return the assistant’s reply text
    return response.choices[0].message.content.strip()

----------------------------------------



========================================
FILE: ./services/market_service.py
========================================

import requests
from datetime import datetime
from .av_client import API_KEY, BASE_URL

def get_current_price(symbol: str) -> float:
    """Returns latest price via GLOBAL_QUOTE."""
    resp = requests.get(BASE_URL, params={
        "function": "GLOBAL_QUOTE",
        "symbol": symbol,
        "apikey": API_KEY
    })
    resp.raise_for_status()
    data = resp.json().get("Global Quote", {})
    price = data.get("05. price") or data.get("5. price")
    return float(price) if price else 0.0

def fetch_daily_history(symbol: str, output_size: str="compact") -> dict:
    """Returns date→{open,high,low,close,volume} via TIME_SERIES_DAILY."""
    resp = requests.get(BASE_URL, params={
        "function": "TIME_SERIES_DAILY",
        "symbol": symbol,
        "outputsize": output_size,
        "apikey": API_KEY
    })
    resp.raise_for_status()
    ts = resp.json().get("Time Series (Daily)", {})
    return {
        datetime.strptime(d, "%Y-%m-%d").date(): {
            "open":  float(vals["1. open"]),
            "high":  float(vals["2. high"]),
            "low":   float(vals["3. low"]),
            "close": float(vals["4. close"]),
            "volume":int(vals["5. volume"])
        }
        for d, vals in ts.items()
    }

----------------------------------------



========================================
FILE: ./services/recommendation_service.py
========================================

# backend/services/recommendation_service.py

from .market_service import get_current_price


def _get_pct_alloc(risk: str) -> dict:
    """
    Maps a user’s risk level to a simple ETF percentage allocation.
    """
    if risk == "low":
        return {"BND": 70, "VTI": 20, "SHY": 10}
    if risk == "medium":
        return {"VTI": 50, "QQQ": 30, "BND": 20}
    if risk == "high":
        return {"QQQ": 60, "VTI": 30, "SPY": 10}
    # Fallback if no recognized risk
    return {"VTI": 100}


def recommend_portfolio(risk: str, total_amount: float) -> dict:
    """
    Builds a detailed portfolio recommendation based on risk and total investment.

    Returns a dict with:
      - risk_level (str)
      - investment_amount (float)
      - allocation (dict of ticker -> { percentage, dollar_amount, price, shares })
    """
    # 1) Get static percentage allocation
    pct_alloc = _get_pct_alloc(risk)

    # 2) Build detailed allocation
    detailed = {}
    for ticker, pct in pct_alloc.items():
        # Dollar slice for this ticker
        dollar_amt = round(total_amount * (pct / 100), 2)
        # Live price lookup
        price = get_current_price(ticker)
        # Compute share count
        shares = round(dollar_amt / price, 4) if price > 0 else 0

        detailed[ticker] = {
            "percentage": pct,
            "dollar_amount": dollar_amt,
            "price": price,
            "shares": shares
        }

    return {
        "risk_level": risk,
        "investment_amount": total_amount,
        "allocation": detailed
    }

----------------------------------------



========================================
FILE: ./services/onboarding_service.py
========================================

# backend/services/onboarding_service.py

import os
from supabase import create_client
from dotenv import load_dotenv

# Load environment variables for Supabase credentials
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Initialize Supabase client
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)


def create_profile(data: dict) -> int:
    """
    Insert an onboarding profile into Supabase and return the new record's ID.
    """
    result = supabase.table("profiles").insert(data).execute()
    try:
        return result.data[0]["id"]
    except Exception:
        raise Exception(f"Unexpected insert response: {result}")


def get_profile(profile_id: int) -> dict:
    """
    Retrieve a single profile by ID from Supabase.
    Returns the row dict or None if not found.
    """
    result = (
        supabase
        .table("profiles")
        .select("*")
        .eq("id", profile_id)
        .single()
        .execute()
    )
    return result.data if getattr(result, "data", None) else None


def delete_profile(profile_id: int) -> bool:
    """
    Delete a profile by ID from Supabase.
    Returns True if a row was deleted, False otherwise.
    """
    result = (
        supabase
        .table("profiles")
        .delete()
        .eq("id", profile_id)
        .execute()
    )
    return bool(getattr(result, "data", None))

----------------------------------------



========================================
FILE: ./services/av_client.py
========================================

import os
from dotenv import load_dotenv

load_dotenv()
API_KEY    = os.getenv("ALPHA_VANTAGE_KEY")
BASE_URL   = "https://www.alphavantage.co/query"

----------------------------------------


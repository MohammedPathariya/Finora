
--- File: ./frontend/node_modules/sanitize.css/sanitize.css ---
/* Document
 * ========================================================================== */

/**
 * 1. Add border box sizing in all browsers (opinionated).
 * 2. Backgrounds do not repeat by default (opinionated).
 */

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  background-repeat: no-repeat; /* 2 */
}

/**
 * 1. Add text decoration inheritance in all browsers (opinionated).
 * 2. Add vertical alignment inheritance in all browsers (opinionated).
 */

::before,
::after {
  text-decoration: inherit; /* 1 */
  vertical-align: inherit; /* 2 */
}

/**
 * 1. Use the default cursor in all browsers (opinionated).
 * 2. Change the line height in all browsers (opinionated).
 * 3. Breaks words to prevent overflow in all browsers (opinionated).
 * 4. Use a 4-space tab width in all browsers (opinionated).
 * 5. Remove the grey highlight on links in iOS (opinionated).
 * 6. Prevent adjustments of font size after orientation changes in iOS.
 */

:where(:root) {
  cursor: default; /* 1 */
  line-height: 1.5; /* 2 */
  overflow-wrap: break-word; /* 3 */
  -moz-tab-size: 4; /* 4 */
  tab-size: 4; /* 4 */
  -webkit-tap-highlight-color: transparent; /* 5 */
  -webkit-text-size-adjust: 100%; /* 6 */
}

/* Sections
 * ========================================================================== */

/**
 * Remove the margin in all browsers (opinionated).
 */

:where(body) {
  margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */

:where(h1) {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
 * ========================================================================== */

/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */

:where(dl, ol, ul) :where(dl, ol, ul) {
  margin: 0;
}

/**
 * 1. Correct the inheritance of border color in Firefox.
 * 2. Add the correct box sizing in Firefox.
 */

:where(hr) {
  color: inherit; /* 1 */
  height: 0; /* 2 */
}

/**
 * Remove the list style on navigation lists in all browsers (opinionated).
 */

:where(nav) :where(ol, ul) {
  list-style-type: none;
  padding: 0;
}

/**
 * Prevent VoiceOver from ignoring list semantics in Safari (opinionated).
 */

:where(nav li)::before {
  content: "\200B";
  float: left;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 * 3. Prevent overflow of the container in all browsers (opinionated).
 */

:where(pre) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
  overflow: auto; /* 3 */
}

/* Text-level semantics
 * ========================================================================== */

/**
 * Add the correct text decoration in Safari.
 */

:where(abbr[title]) {
  text-decoration: underline;
  text-decoration: underline dotted;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

:where(b, strong) {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

:where(code, kbd, samp) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

:where(small) {
  font-size: 80%;
}

/* Embedded content
 * ========================================================================== */

/*
 * Change the alignment on media elements in all browsers (opinionated).
 */

:where(audio, canvas, iframe, img, svg, video) {
  vertical-align: middle;
}

/**
 * Remove the border on iframes in all browsers (opinionated).
 */

:where(iframe) {
  border-style: none;
}

/**
 * Change the fill color to match the text color in all browsers (opinionated).
 */

:where(svg:not([fill])) {
  fill: currentColor;
}

/* Tabular data
 * ========================================================================== */

/**
 * 1. Collapse border spacing in all browsers (opinionated).
 * 2. Correct table border color inheritance in all Chrome, Edge, and Safari.
 * 3. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */

:where(table) {
  border-collapse: collapse; /* 1 */
  border-color: inherit; /* 2 */
  text-indent: 0; /* 3 */
}

/* Forms
 * ========================================================================== */

/**
 * Remove the margin on controls in Safari.
 */

:where(button, input, select) {
  margin: 0;
}

/**
 * Correct the inability to style buttons in iOS and Safari.
 */

:where(button, [type="button" i], [type="reset" i], [type="submit" i]) {
  -webkit-appearance: button;
}

/**
 * Change the inconsistent appearance in all browsers (opinionated).
 */

:where(fieldset) {
  border: 1px solid #a0a0a0;
}

/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */

:where(progress) {
  vertical-align: baseline;
}

/**
 * 1. Remove the margin in Firefox and Safari.
 * 3. Change the resize direction in all browsers (opinionated).
 */

:where(textarea) {
  margin: 0; /* 1 */
  resize: vertical; /* 3 */
}

/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */

:where([type="search" i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */

::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
 * ========================================================================== */

/*
 * Add the correct styles in Safari.
 */

:where(dialog) {
  background-color: white;
  border: solid;
  color: black;
  height: -moz-fit-content;
  height: fit-content;
  left: 0;
  margin: auto;
  padding: 1em;
  position: absolute;
  right: 0;
  width: -moz-fit-content;
  width: fit-content;
}

:where(dialog:not([open])) {
  display: none;
}

/*
 * Add the correct display in Safari.
 */

:where(details > summary:first-of-type) {
  display: list-item;
}

/* Accessibility
 * ========================================================================== */

/**
 * Change the cursor on busy elements in all browsers (opinionated).
 */

:where([aria-busy="true" i]) {
  cursor: progress;
}

/*
 * Change the cursor on control elements in all browsers (opinionated).
 */

:where([aria-controls]) {
  cursor: pointer;
}

/*
 * Change the cursor on disabled, not-editable, or otherwise
 * inoperable elements in all browsers (opinionated).
 */

:where([aria-disabled="true" i], [disabled]) {
  cursor: not-allowed;
}

/*
 * Change the display on visually hidden accessible elements
 * in all browsers (opinionated).
 */

:where([aria-hidden="false" i][hidden]) {
  display: initial;
}

:where([aria-hidden="false" i][hidden]:not(:focus)) {
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

--- File: ./frontend/node_modules/sanitize.css/typography.css ---
/**
 * Use the default user interface font in all browsers (opinionated).
 */

html {
  font-family:
    system-ui,
    /* macOS 10.11-10.12 */ -apple-system,
    /* Windows 6+ */ "Segoe UI",
    /* Android 4+ */ "Roboto",
    /* Ubuntu 10.10+ */ "Ubuntu",
    /* Gnome 3+ */ "Cantarell",
    /* KDE Plasma 5+ */ "Noto Sans",
    /* fallback */ sans-serif,
    /* macOS emoji */ "Apple Color Emoji",
    /* Windows emoji */ "Segoe UI Emoji",
    /* Windows emoji */ "Segoe UI Symbol",
    /* Linux emoji */ "Noto Color Emoji";
}

/**
 * Use the default monospace user interface font in all browsers (opinionated).
 */

code,
kbd,
samp,
pre {
  font-family:
    ui-monospace,
    /* macOS 10.10+ */ "Menlo",
    /* Windows 6+ */ "Consolas",
    /* Android 4+ */ "Roboto Mono",
    /* Ubuntu 10.10+ */ "Ubuntu Monospace",
    /* KDE Plasma 5+ */ "Noto Mono",
    /* KDE Plasma 4+ */ "Oxygen Mono",
    /* Linux/OpenOffice fallback */ "Liberation Mono",
    /* fallback */ monospace,
    /* macOS emoji */ "Apple Color Emoji",
    /* Windows emoji */ "Segoe UI Emoji",
    /* Windows emoji */ "Segoe UI Symbol",
    /* Linux emoji */ "Noto Color Emoji";
}

--- File: ./frontend/node_modules/sanitize.css/system-ui.css ---
/**
 * Add the correct system-ui font-family in Firefox.
 */

@font-face {
  font-family: system-ui;
  src: local(".AppleSystemUIFont"), local("Segoe UI"), local("Ubuntu"), local("Roboto-Regular"), local("HelveticaNeue");
}

@font-face {
  font-family: system-ui;
  font-style: italic;
  src: local(".AppleSystemUIFont"), local("Segoe UI Italic"), local("Ubuntu-Italic"), local("Roboto-Italic"), local("HelveticaNeue-Italic");
}

@font-face {
  font-family: system-ui;
  font-weight: bold;
  src: local(".AppleSystemUIFont"), local("Segoe UI Bold"), local("Ubuntu-Bold"), local("Roboto-Bold"), local("HelveticaNeue-Bold");
}

@font-face {
  font-family: system-ui;
  font-style: italic;
  font-weight: bold;
  src: local(".AppleSystemUIFont"), local("Segoe UI Bold Italic"), local("Ubuntu-BoldItalic"), local("Roboto-BoldItalic"), local("HelveticaNeue-BoldItalic");
}

--- File: ./frontend/node_modules/sanitize.css/forms.css ---
/**
 * 1. Change the inconsistent appearance in all browsers (opinionated).
 * 2. Add typography inheritance in all browsers (opinionated).
 */

:where(button, input, select, textarea) {
  background-color: transparent; /* 1 */
  border: 1px solid WindowFrame; /* 1 */
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  letter-spacing: inherit; /* 2 */
  padding: 0.25em 0.375em; /* 1 */
}

/**
 * Change the inconsistent appearance in all browsers (opinionated).
 */

:where(select) {
  appearance: none;
  background: url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='4'%3E%3Cpath d='M4 0h6L7 4'/%3E%3C/svg%3E") no-repeat right center / 1em;
  border-radius: 0;
  padding-right: 1em;
}

/**
 * Don't show the arrow for multiple choice selects
 */

:where(select[multiple]) {
  background-image: none;
}

/**
 * Remove the border and padding in all browsers (opinionated).
 */

:where([type="color" i], [type="range" i]) {
  border-width: 0;
  padding: 0;
}

--- File: ./frontend/node_modules/sanitize.css/ui-monospace.css ---
/**
 * Add the correct system-ui font-family in Chrome, Edge, and Firefox.
 */

@font-face {
  font-family: ui-monospace;
  src: local(".AppleSystemUIFontMonospaced-Regular"), local("Segoe UI Mono"), local("UbuntuMono"), local("Roboto-Mono"), local("Menlo");
}

@font-face {
  font-family: ui-monospace;
  font-style: italic;
  src: local(".AppleSystemUIFontMonospaced-RegularItalic"), local("Segoe UI Mono Italic"), local("UbuntuMono-Italic"), local("Roboto-Mono-Italic"), local("Menlo-Italic");
}

@font-face {
  font-family: ui-monospace;
  font-weight: bold;
  src: local(".AppleSystemUIFontMonospaced-Bold"), local("Segoe UI Mono Bold"), local("UbuntuMono-Bold"), local("Roboto-Mono-Bold"), local("Menlo-Bold");
}

@font-face {
  font-family: ui-monospace;
  font-style: italic;
  font-weight: bold;
  src: local(".AppleSystemUIFontMonospaced-BoldItalic"), local("Segoe UI Mono Bold Italic"), local("UbuntuMono-BoldItalic"), local("Roboto-Mono-BoldItalic"), local("Menlo-BoldItalic");
}

--- File: ./frontend/node_modules/sanitize.css/assets.css ---
/**
 * Restrict sizing to the page width in all browsers (opinionated).
 */

:where(iframe, img, input, video, select, textarea) {
  height: auto;
  max-width: 100%;
}

--- File: ./frontend/node_modules/sanitize.css/reduce-motion.css ---
/*
 * 1. Remove animations when motion is reduced (opinionated).
 * 2. Remove fixed background attachments when motion is reduced (opinionated).
 * 3. Remove timed scrolling behaviors when motion is reduced (opinionated).
 * 4. Remove transitions when motion is reduced (opinionated).
 */

@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-delay: -1ms !important; /* 1 */
    animation-duration: 1ms !important; /* 1 */
    animation-iteration-count: 1 !important; /* 1 */
    background-attachment: initial !important; /* 2 */
    scroll-behavior: auto !important; /* 3 */
    transition-delay: 0s !important; /* 4 */
    transition-duration: 0s !important; /* 4 */
  }
}

--- File: ./frontend/node_modules/istanbul-reports/lib/html/assets/base.css ---
body, html {
  margin:0; padding: 0;
  height: 100%;
}
body {
    font-family: Helvetica Neue, Helvetica, Arial;
    font-size: 14px;
    color:#333;
}
.small { font-size: 12px; }
*, *:after, *:before {
  -webkit-box-sizing:border-box;
     -moz-box-sizing:border-box;
          box-sizing:border-box;
  }
h1 { font-size: 20px; margin: 0;}
h2 { font-size: 14px; }
pre {
    font: 12px/1.4 Consolas, "Liberation Mono", Menlo, Courier, monospace;
    margin: 0;
    padding: 0;
    -moz-tab-size: 2;
    -o-tab-size:  2;
    tab-size: 2;
}
a { color:#0074D9; text-decoration:none; }
a:hover { text-decoration:underline; }
.strong { font-weight: bold; }
.space-top1 { padding: 10px 0 0 0; }
.pad2y { padding: 20px 0; }
.pad1y { padding: 10px 0; }
.pad2x { padding: 0 20px; }
.pad2 { padding: 20px; }
.pad1 { padding: 10px; }
.space-left2 { padding-left:55px; }
.space-right2 { padding-right:20px; }
.center { text-align:center; }
.clearfix { display:block; }
.clearfix:after {
  content:'';
  display:block;
  height:0;
  clear:both;
  visibility:hidden;
  }
.fl { float: left; }
@media only screen and (max-width:640px) {
  .col3 { width:100%; max-width:100%; }
  .hide-mobile { display:none!important; }
}

.quiet {
  color: #7f7f7f;
  color: rgba(0,0,0,0.5);
}
.quiet a { opacity: 0.7; }

.fraction {
  font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 10px;
  color: #555;
  background: #E8E8E8;
  padding: 4px 5px;
  border-radius: 3px;
  vertical-align: middle;
}

div.path a:link, div.path a:visited { color: #333; }
table.coverage {
  border-collapse: collapse;
  margin: 10px 0 0 0;
  padding: 0;
}

table.coverage td {
  margin: 0;
  padding: 0;
  vertical-align: top;
}
table.coverage td.line-count {
    text-align: right;
    padding: 0 5px 0 20px;
}
table.coverage td.line-coverage {
    text-align: right;
    padding-right: 10px;
    min-width:20px;
}

table.coverage td span.cline-any {
    display: inline-block;
    padding: 0 5px;
    width: 100%;
}
.missing-if-branch {
    display: inline-block;
    margin-right: 5px;
    border-radius: 3px;
    position: relative;
    padding: 0 4px;
    background: #333;
    color: yellow;
}

.skip-if-branch {
    display: none;
    margin-right: 10px;
    position: relative;
    padding: 0 4px;
    background: #ccc;
    color: white;
}
.missing-if-branch .typ, .skip-if-branch .typ {
    color: inherit !important;
}
.coverage-summary {
  border-collapse: collapse;
  width: 100%;
}
.coverage-summary tr { border-bottom: 1px solid #bbb; }
.keyline-all { border: 1px solid #ddd; }
.coverage-summary td, .coverage-summary th { padding: 10px; }
.coverage-summary tbody { border: 1px solid #bbb; }
.coverage-summary td { border-right: 1px solid #bbb; }
.coverage-summary td:last-child { border-right: none; }
.coverage-summary th {
  text-align: left;
  font-weight: normal;
  white-space: nowrap;
}
.coverage-summary th.file { border-right: none !important; }
.coverage-summary th.pct { }
.coverage-summary th.pic,
.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs { text-align: right; }
.coverage-summary td.file { white-space: nowrap;  }
.coverage-summary td.pic { min-width: 120px !important;  }
.coverage-summary tfoot td { }

.coverage-summary .sorter {
    height: 10px;
    width: 7px;
    display: inline-block;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}
.coverage-summary .sorted .sorter {
    background-position: 0 -20px;
}
.coverage-summary .sorted-desc .sorter {
    background-position: 0 -10px;
}
.status-line {  height: 10px; }
/* yellow */
.cbranch-no { background: yellow !important; color: #111; }
/* dark red */
.red.solid, .status-line.low, .low .cover-fill { background:#C21F39 }
.low .chart { border:1px solid #C21F39 }
.highlighted,
.highlighted .cstat-no, .highlighted .fstat-no, .highlighted .cbranch-no{
  background: #C21F39 !important;
}
/* medium red */
.cstat-no, .fstat-no, .cbranch-no, .cbranch-no { background:#F6C6CE }
/* light red */
.low, .cline-no { background:#FCE1E5 }
/* light green */
.high, .cline-yes { background:rgb(230,245,208) }
/* medium green */
.cstat-yes { background:rgb(161,215,106) }
/* dark green */
.status-line.high, .high .cover-fill { background:rgb(77,146,33) }
.high .chart { border:1px solid rgb(77,146,33) }
/* dark yellow (gold) */
.status-line.medium, .medium .cover-fill { background: #f9cd0b; }
.medium .chart { border:1px solid #f9cd0b; }
/* light yellow */
.medium { background: #fff4c2; }

.cstat-skip { background: #ddd; color: #111; }
.fstat-skip { background: #ddd; color: #111 !important; }
.cbranch-skip { background: #ddd !important; color: #111; }

span.cline-neutral { background: #eaeaea; }

.coverage-summary td.empty {
    opacity: .5;
    padding-top: 4px;
    padding-bottom: 4px;
    line-height: 1;
    color: #888;
}

.cover-fill, .cover-empty {
  display:inline-block;
  height: 12px;
}
.chart {
  line-height: 0;
}
.cover-empty {
    background: white;
}
.cover-full {
    border-right: none !important;
}
pre.prettyprint {
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
}
.com { color: #999 !important; }
.ignore-none { color: #999; font-weight: normal; }

.wrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -48px;
}
.footer, .push {
  height: 48px;
}

--- File: ./frontend/node_modules/istanbul-reports/lib/html/assets/vendor/prettify.css ---
.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}

--- File: ./frontend/node_modules/istanbul-reports/lib/html-spa/assets/spa.css ---
/* Base */

body,
html {
    margin: 0;
    padding: 0;
    height: 100%;
}

body {
    color: #333;
    background-color: #fcfcfc;
    font: 14px/14px -apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI',
        Roboto, 'Helvetica Neue', Arial, sans-serif;
}

button {
    margin: 0;
    border: none;
    font: inherit;
    color: inherit;
}

button:focus {
    outline: none;
}

*,
*:after,
*:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

/* Typography */

h1 {
    font-size: 20px;
    line-height: 20px;
    margin: 0;
}

a {
    color: #0074d9;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

.small {
    font-size: 12px;
}

.strong {
    font-weight: bold;
}

.center {
    text-align: center;
}

.quiet {
    opacity: 0.7;
}

/* Colors */

.low {
    background: #fce1e5;
}

.low--dark {
    background: #c21f39;
}

.medium {
    background: #fff4c2;
}

.medium--dark {
    background: #f9cd0b;
}

.high {
    background: rgb(230, 245, 208);
}

.high--dark {
    background: rgb(77, 146, 33);
}

/* App */

.app {
    height: 100%;
}

/* Layout */

.layout {
    display: flex;
    flex-direction: column;
    min-height: 100%;
    padding: 20px;
}

.layout__section {
    flex-grow: 0;
}

.layout__section--fill {
    flex-grow: 1;
}

.layout__section + .layout__section {
    margin-top: 20px;
}

@media only screen and (max-width: 640px) {
    .col3 {
        width: 100%;
        max-width: 100%;
    }
    .hide-mobile {
        display: none !important;
    }
}

/* Toolbar */

.toolbar {
    display: flex;
    flex-wrap: wrap;
}

.toolbar__item {
    margin-right: 40px;
    margin-bottom: 10px;
}

/* Toggle */

.toggle {
    display: inline-flex;
    align-items: center;
}

.toggle__label {
    margin-right: 0.5em;
}

.toggle__options {
    display: inline-block;
    border: 1px solid #0074d9;
    border-radius: 4px;
    color: #0074d9;
    overflow: hidden;
    white-space: nowrap;
}

.toggle__option {
    padding: 4px 8px;
    background: #fcfcfc;
}

.toggle__option + .toggle__option {
    border-left: 1px solid #0074d9;
}

.toggle__option.is-toggled {
    color: #fff;
    background: #0074d9;
    border-left-color: #fcfcfc;
}

/* Expand */

.expandbutton {
    display: inline-block;
    width: 1em;
    margin-right: 0.25em;
    padding: 0;
    background-color: transparent;
    font-weight: bold;
}

/* Fraction */

.fraction {
    font-size: 12px;
    color: #666;
    padding: 2px 4px;
    border-radius: 4px;
}

/* Coverage */

.coverage-summary {
    border-collapse: collapse;
}

.coverage-summary tbody tr {
    border-bottom: 1px solid #fff;
}

.coverage-summary td,
.coverage-summary th {
    padding: 5px;
}

.coverage-summary th {
    text-align: center;
    font-weight: normal;
    white-space: nowrap;
}

.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs {
    text-align: right;
}

.coverage-summary th.file {
    min-width: 300px;
    text-align: left;
}

.coverage-summary td.file {
    white-space: nowrap;
}

.coverage-summary td.pct {
    font-weight: 400;
}

.coverage-summary td.abs {
    color: #666;
    font-size: 12px;
}

.coverage-summary td.empty {
    opacity: 0.5;
}

.coverage-summary .headercell {
    border-top: 1px solid #eee;
    text-align: right;
    font-size: 12px;
    color: #666;
}

.coverage-summary .headercell:nth-child(5n - 2),
.coverage-summary td:nth-child(5n - 2) {
    border-left: 2px solid #fcfcfc;
    padding-left: 2em;
}

.filetab {
    display: inline-block;
    width: 1em;
}

/* Sorter */

.sorter {
    display: inline-block;
    width: 7px;
    height: 10px;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}

.sorted .sorter {
    background-position: 0 -20px;
}

.sorted-desc .sorter {
    background-position: 0 -10px;
}

.sortable {
    cursor: pointer;
}

/* Bar */

.bar {
    width: 50px;
    height: 5px;
    background: #fff;
}

.bar__data {
    height: 100%;
}

--- File: ./frontend/node_modules/@csstools/normalize.css/opinionated.css ---
/* Document
 * ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

:where(html) {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  text-size-adjust: 100%; /* 2 */
}

/* Sections
 * ========================================================================== */

/**
 * Remove the margin in all browsers. (opinionated)
 */

:where(body) {
  margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */

:where(h1) {
  font-size: 2em;
  margin-block-end: 0.67em;
  margin-block-start: 0.67em;
}

/* Grouping content
 * ========================================================================== */

/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */

:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block-end: 0;
  margin-block-start: 0;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Correct the inheritance of border color in Firefox.
 */

:where(hr) {
  box-sizing: content-box; /* 1 */
  color: inherit; /* 2 */
  height: 0; /* 1 */
}

/* Text-level semantics
 * ========================================================================== */

/**
 * Add the correct text decoration in Safari.
 */

:where(abbr[title]) {
  text-decoration: underline;
  text-decoration: underline dotted;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

:where(b, strong) {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

:where(code, kbd, pre, samp) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

:where(small) {
  font-size: 80%;
}

/* Tabular data
 * ========================================================================== */

/**
 * 1. Correct table border color in Chrome, Edge, and Safari.
 * 2. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */

:where(table) {
  border-color: currentColor; /* 1 */
  text-indent: 0; /* 2 */
}

/* Forms
 * ========================================================================== */

/**
 * Remove the margin on controls in Safari.
 */

:where(button, input, select) {
  margin: 0;
}

/**
 * Remove the inheritance of text transform in Firefox.
 */

:where(button) {
  text-transform: none;
}

/**
 * Correct the inability to style buttons in iOS and Safari.
 */

:where(button, input:is([type="button" i], [type="reset" i], [type="submit" i])) {
  -webkit-appearance: button;
}

/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */

:where(progress) {
  vertical-align: baseline;
}

/**
 * Remove the inheritance of text transform in Firefox.
 */

:where(select) {
  text-transform: none;
}

/**
 * Remove the margin in Firefox and Safari.
 */

:where(textarea) {
  margin: 0;
}

/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */

:where(input[type="search" i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */

::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/**
 * Remove the inner border and padding of focus outlines in Firefox.
 */

:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus outline styles unset by the previous rule in Firefox.
 */

:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Remove the additional :invalid styles in Firefox.
 */

:where(:-moz-ui-invalid) {
  box-shadow: none;
}

/* Interactive
 * ========================================================================== */

/*
 * Add the correct styles in Safari.
 */

:where(dialog) {
  background-color: white;
  border: solid;
  color: black;
  height: -moz-fit-content;
  height: fit-content;
  left: 0;
  margin: auto;
  padding: 1em;
  position: absolute;
  right: 0;
  width: -moz-fit-content;
  width: fit-content;
}

:where(dialog:not([open])) {
  display: none;
}

/*
 * Add the correct display in all browsers.
 */

:where(summary) {
  display: list-item;
}

--- File: ./frontend/node_modules/@csstools/normalize.css/normalize.css ---
/* Document
 * ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

:where(html) {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  text-size-adjust: 100%; /* 2 */
}

/* Sections
 * ========================================================================== */

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */

:where(h1) {
  font-size: 2em;
  margin-block-end: 0.67em;
  margin-block-start: 0.67em;
}

/* Grouping content
 * ========================================================================== */

/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */

:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block-end: 0;
  margin-block-start: 0;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Correct the inheritance of border color in Firefox.
 */

:where(hr) {
  box-sizing: content-box; /* 1 */
  color: inherit; /* 2 */
  height: 0; /* 1 */
}

/* Text-level semantics
 * ========================================================================== */

/**
 * Add the correct text decoration in Safari.
 */

:where(abbr[title]) {
  text-decoration: underline;
  text-decoration: underline dotted;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

:where(b, strong) {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

:where(code, kbd, pre, samp) {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

:where(small) {
  font-size: 80%;
}

/* Tabular data
 * ========================================================================== */

/**
 * 1. Correct table border color in Chrome, Edge, and Safari.
 * 2. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */

:where(table) {
  border-color: currentColor; /* 1 */
  text-indent: 0; /* 2 */
}

/* Forms
 * ========================================================================== */

/**
 * Remove the margin on controls in Safari.
 */

:where(button, input, select) {
  margin: 0;
}

/**
 * Remove the inheritance of text transform in Firefox.
 */

:where(button) {
  text-transform: none;
}

/**
 * Correct the inability to style buttons in iOS and Safari.
 */

:where(button, input:is([type="button" i], [type="reset" i], [type="submit" i])) {
  -webkit-appearance: button;
}

/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */

:where(progress) {
  vertical-align: baseline;
}

/**
 * Remove the inheritance of text transform in Firefox.
 */

:where(select) {
  text-transform: none;
}

/**
 * Remove the margin in Firefox and Safari.
 */

:where(textarea) {
  margin: 0;
}

/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */

:where(input[type="search" i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */

::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/**
 * Remove the inner border and padding of focus outlines in Firefox.
 */

:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus outline styles unset by the previous rule in Firefox.
 */

:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Remove the additional :invalid styles in Firefox.
 */

:where(:-moz-ui-invalid) {
  box-shadow: none;
}

/* Interactive
 * ========================================================================== */

/*
 * Add the correct styles in Safari.
 */

:where(dialog) {
  background-color: white;
  border: solid;
  color: black;
  height: -moz-fit-content;
  height: fit-content;
  left: 0;
  margin: auto;
  padding: 1em;
  position: absolute;
  right: 0;
  width: -moz-fit-content;
  width: fit-content;
}

:where(dialog:not([open])) {
  display: none;
}

/*
 * Add the correct display in all browsers.
 */

:where(summary) {
  display: list-item;
}

--- File: ./frontend/node_modules/@radix-ui/react-use-effect-event/src/use-effect-event.tsx ---
/* eslint-disable react-hooks/rules-of-hooks */
import { useLayoutEffect } from '@radix-ui/react-use-layout-effect';
import * as React from 'react';

type AnyFunction = (...args: any[]) => any;

// See https://github.com/webpack/webpack/issues/14814
const useReactEffectEvent = (React as any)[' useEffectEvent '.trim().toString()];
const useReactInsertionEffect = (React as any)[' useInsertionEffect '.trim().toString()];

/**
 * Designed to approximate the behavior on `experimental_useEffectEvent` as best
 * as possible until its stable release, and back-fill it as a shim as needed.
 */
export function useEffectEvent<T extends AnyFunction>(callback?: T): T {
  if (typeof useReactEffectEvent === 'function') {
    return useReactEffectEvent(callback);
  }

  const ref = React.useRef<AnyFunction | undefined>(() => {
    throw new Error('Cannot call an event handler while rendering.');
  });
  // See https://github.com/webpack/webpack/issues/14814
  if (typeof useReactInsertionEffect === 'function') {
    useReactInsertionEffect(() => {
      ref.current = callback;
    });
  } else {
    useLayoutEffect(() => {
      ref.current = callback;
    });
  }

  // https://github.com/facebook/react/issues/19240
  return React.useMemo(() => ((...args) => ref.current?.(...args)) as T, []);
}

--- File: ./frontend/node_modules/tailwindcss/tailwind.css ---
@tailwind base;

@tailwind components;

@tailwind utilities;

--- File: ./frontend/node_modules/tailwindcss/screens.css ---
@tailwind screens;

--- File: ./frontend/node_modules/tailwindcss/variants.css ---
@tailwind variants;

--- File: ./frontend/node_modules/tailwindcss/lib/css/preflight.css ---
/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: theme('borderColor.DEFAULT', currentColor); /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  -moz-tab-size: 4; /* 3 */
  tab-size: 4; /* 3 */
  font-family: theme('fontFamily.sans', ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"); /* 4 */
  font-feature-settings: theme('fontFamily.sans[1].fontFeatureSettings', normal); /* 5 */
  font-variation-settings: theme('fontFamily.sans[1].fontVariationSettings', normal); /* 6 */
  -webkit-tap-highlight-color: transparent; /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0; /* 1 */
  line-height: inherit; /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
  border-top-width: 1px; /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace); /* 1 */
  font-feature-settings: theme('fontFamily.mono[1].fontFeatureSettings', normal); /* 2 */
  font-variation-settings: theme('fontFamily.mono[1].fontVariationSettings', normal); /* 3 */
  font-size: 1em; /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
  border-collapse: collapse; /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-feature-settings: inherit; /* 1 */
  font-variation-settings: inherit; /* 1 */
  font-size: 100%; /* 1 */
  font-weight: inherit; /* 1 */
  line-height: inherit; /* 1 */
  letter-spacing: inherit; /* 1 */
  color: inherit; /* 1 */
  margin: 0; /* 2 */
  padding: 0; /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button; /* 1 */
  background-color: transparent; /* 2 */
  background-image: none; /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/
dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::placeholder,
textarea::placeholder {
  opacity: 1; /* 1 */
  color: theme('colors.gray.400', #9ca3af); /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/
:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */
[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

--- File: ./frontend/node_modules/tailwindcss/components.css ---
@tailwind components;

--- File: ./frontend/node_modules/tailwindcss/utilities.css ---
@tailwind utilities;

--- File: ./frontend/node_modules/tailwindcss/base.css ---
@tailwind base;

--- File: ./frontend/node_modules/tailwindcss/src/css/preflight.css ---
/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: theme('borderColor.DEFAULT', currentColor); /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
7. Disable tap highlights on iOS
*/

html,
:host {
  line-height: 1.5; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
  -moz-tab-size: 4; /* 3 */
  tab-size: 4; /* 3 */
  font-family: theme('fontFamily.sans', ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"); /* 4 */
  font-feature-settings: theme('fontFamily.sans[1].fontFeatureSettings', normal); /* 5 */
  font-variation-settings: theme('fontFamily.sans[1].fontVariationSettings', normal); /* 6 */
  -webkit-tap-highlight-color: transparent; /* 7 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0; /* 1 */
  line-height: inherit; /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
  border-top-width: 1px; /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font-family by default.
2. Use the user's configured `mono` font-feature-settings by default.
3. Use the user's configured `mono` font-variation-settings by default.
4. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace); /* 1 */
  font-feature-settings: theme('fontFamily.mono[1].fontFeatureSettings', normal); /* 2 */
  font-variation-settings: theme('fontFamily.mono[1].fontVariationSettings', normal); /* 3 */
  font-size: 1em; /* 4 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
  border-collapse: collapse; /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-feature-settings: inherit; /* 1 */
  font-variation-settings: inherit; /* 1 */
  font-size: 100%; /* 1 */
  font-weight: inherit; /* 1 */
  line-height: inherit; /* 1 */
  letter-spacing: inherit; /* 1 */
  color: inherit; /* 1 */
  margin: 0; /* 2 */
  padding: 0; /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
input:where([type='button']),
input:where([type='reset']),
input:where([type='submit']) {
  -webkit-appearance: button; /* 1 */
  background-color: transparent; /* 2 */
  background-image: none; /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/
dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::placeholder,
textarea::placeholder {
  opacity: 1; /* 1 */
  color: theme('colors.gray.400', #9ca3af); /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/
:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */
[hidden]:where(:not([hidden="until-found"])) {
  display: none;
}

--- File: ./frontend/node_modules/serve-index/public/style.css ---
* {
  margin: 0;
  padding: 0;
  outline: 0;
}

body {
  padding: 80px 100px;
  font: 13px "Helvetica Neue", "Lucida Grande", "Arial";
  background: #ECE9E9 -webkit-gradient(linear, 0% 0%, 0% 100%, from(#fff), to(#ECE9E9));
  background: #ECE9E9 -moz-linear-gradient(top, #fff, #ECE9E9);
  background-repeat: no-repeat;
  color: #555;
  -webkit-font-smoothing: antialiased;
}
h1, h2, h3 {
  font-size: 22px;
  color: #343434;
}
h1 em, h2 em {
  padding: 0 5px;
  font-weight: normal;
}
h1 {
  font-size: 60px;
}
h2 {
  margin-top: 10px;
}
h3 {
  margin: 5px 0 10px 0;
  padding-bottom: 5px;
  border-bottom: 1px solid #eee;
  font-size: 18px;
}
ul li {
  list-style: none;
}
ul li:hover {
  cursor: pointer;
  color: #2e2e2e;
}
ul li .path {
  padding-left: 5px;
  font-weight: bold;
}
ul li .line {
  padding-right: 5px;
  font-style: italic;
}
ul li:first-child .path {
  padding-left: 0;
}
p {
  line-height: 1.5;
}
a {
  color: #555;
  text-decoration: none;
}
a:hover {
  color: #303030;
}
#stacktrace {
  margin-top: 15px;
}
.directory h1 {
  margin-bottom: 15px;
  font-size: 18px;
}
ul#files {
  width: 100%;
  height: 100%;
  overflow: hidden;
}
ul#files li {
  float: left;
  width: 30%;
  line-height: 25px;
  margin: 1px;
}
ul#files li a {
  display: block;
  height: 25px;
  border: 1px solid transparent;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px;
  border-radius: 5px;
  overflow: hidden;
  white-space: nowrap;
}
ul#files li a:focus,
ul#files li a:hover {
  background: rgba(255,255,255,0.65);
  border: 1px solid #ececec;
}
ul#files li a.highlight {
  -webkit-transition: background .4s ease-in-out;
  background: #ffff4f;
  border-color: #E9DC51;
}
#search {
  display: block;
  position: fixed;
  top: 20px;
  right: 20px;
  width: 90px;
  -webkit-transition: width ease 0.2s, opacity ease 0.4s;
  -moz-transition: width ease 0.2s, opacity ease 0.4s;
  -webkit-border-radius: 32px;
  -moz-border-radius: 32px;
  -webkit-box-shadow: inset 0px 0px 3px rgba(0, 0, 0, 0.25), inset 0px 1px 3px rgba(0, 0, 0, 0.7), 0px 1px 0px rgba(255, 255, 255, 0.03);
  -moz-box-shadow: inset 0px 0px 3px rgba(0, 0, 0, 0.25), inset 0px 1px 3px rgba(0, 0, 0, 0.7), 0px 1px 0px rgba(255, 255, 255, 0.03);
  -webkit-font-smoothing: antialiased;
  text-align: left;
  font: 13px "Helvetica Neue", Arial, sans-serif;
  padding: 4px 10px;
  border: none;
  background: transparent;
  margin-bottom: 0;
  outline: none;
  opacity: 0.7;
  color: #888;
}
#search:focus {
  width: 120px;
  opacity: 1.0; 
}

/*views*/
#files span {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  text-indent: 10px;
}
#files .name {
  background-repeat: no-repeat;
}
#files .icon .name {
  text-indent: 28px;
}

/*tiles*/
.view-tiles .name {
  width: 100%;
  background-position: 8px 5px;
}
.view-tiles .size,
.view-tiles .date {
  display: none;
}

/*details*/
ul#files.view-details li {
  float: none;
  display: block;
  width: 90%;
}
ul#files.view-details li.header {
  height: 25px;
  background: #000;
  color: #fff;
  font-weight: bold;
}
.view-details .header {
  border-radius: 5px;
}
.view-details .name {
  width: 60%;
  background-position: 8px 5px;
}
.view-details .size {
  width: 10%;
}
.view-details .date {
  width: 30%;
}
.view-details .size,
.view-details .date {
  text-align: right;
  direction: rtl;
}

/*mobile*/
@media (max-width: 768px) {
  body {
    font-size: 13px;
    line-height: 16px;
    padding: 0;
  }
  #search {
    position: static;
    width: 100%;
    font-size: 2em;
    line-height: 1.8em;
    text-indent: 10px;
    border: 0;
    border-radius: 0;
    padding: 10px 0;
    margin: 0;
  }
  #search:focus {
    width: 100%;
    border: 0;
    opacity: 1;
  }
  .directory h1 {
    font-size: 2em;
    line-height: 1.5em;
    color: #fff;
    background: #000;
    padding: 15px 10px;
    margin: 0;
  }
  ul#files {
    border-top: 1px solid #cacaca;
  }
  ul#files li {
    float: none;
    width: auto !important;
    display: block;
    border-bottom: 1px solid #cacaca;
    font-size: 2em;
    line-height: 1.2em;
    text-indent: 0;
    margin: 0;
  }
  ul#files li:nth-child(odd) {
    background: #e0e0e0;
  }
  ul#files li a {
    height: auto;
    border: 0;
    border-radius: 0;
    padding: 15px 10px;
  }
  ul#files li a:focus,
  ul#files li a:hover {
    border: 0;
  }
  #files .header,
  #files .size,
  #files .date {
    display: none !important;
  }
  #files .name {
    float: none;
    display: inline-block;
    width: 100%;
    text-indent: 0;
    background-position: 0 50%;
  }
  #files .icon .name {
    text-indent: 41px;
  }
}

--- File: ./frontend/node_modules/lz-string/tests/lib/jasmine-1.3.1/jasmine.css ---
body { background-color: #eeeeee; padding: 0; margin: 5px; overflow-y: scroll; }

#HTMLReporter { font-size: 11px; font-family: Monaco, "Lucida Console", monospace; line-height: 14px; color: #333333; }
#HTMLReporter a { text-decoration: none; }
#HTMLReporter a:hover { text-decoration: underline; }
#HTMLReporter p, #HTMLReporter h1, #HTMLReporter h2, #HTMLReporter h3, #HTMLReporter h4, #HTMLReporter h5, #HTMLReporter h6 { margin: 0; line-height: 14px; }
#HTMLReporter .banner, #HTMLReporter .symbolSummary, #HTMLReporter .summary, #HTMLReporter .resultMessage, #HTMLReporter .specDetail .description, #HTMLReporter .alert .bar, #HTMLReporter .stackTrace { padding-left: 9px; padding-right: 9px; }
#HTMLReporter #jasmine_content { position: fixed; right: 100%; }
#HTMLReporter .version { color: #aaaaaa; }
#HTMLReporter .banner { margin-top: 14px; }
#HTMLReporter .duration { color: #aaaaaa; float: right; }
#HTMLReporter .symbolSummary { overflow: hidden; *zoom: 1; margin: 14px 0; }
#HTMLReporter .symbolSummary li { display: block; float: left; height: 7px; width: 14px; margin-bottom: 7px; font-size: 16px; }
#HTMLReporter .symbolSummary li.passed { font-size: 14px; }
#HTMLReporter .symbolSummary li.passed:before { color: #5e7d00; content: "\02022"; }
#HTMLReporter .symbolSummary li.failed { line-height: 9px; }
#HTMLReporter .symbolSummary li.failed:before { color: #b03911; content: "x"; font-weight: bold; margin-left: -1px; }
#HTMLReporter .symbolSummary li.skipped { font-size: 14px; }
#HTMLReporter .symbolSummary li.skipped:before { color: #bababa; content: "\02022"; }
#HTMLReporter .symbolSummary li.pending { line-height: 11px; }
#HTMLReporter .symbolSummary li.pending:before { color: #aaaaaa; content: "-"; }
#HTMLReporter .exceptions { color: #fff; float: right; margin-top: 5px; margin-right: 5px; }
#HTMLReporter .bar { line-height: 28px; font-size: 14px; display: block; color: #eee; }
#HTMLReporter .runningAlert { background-color: #666666; }
#HTMLReporter .skippedAlert { background-color: #aaaaaa; }
#HTMLReporter .skippedAlert:first-child { background-color: #333333; }
#HTMLReporter .skippedAlert:hover { text-decoration: none; color: white; text-decoration: underline; }
#HTMLReporter .passingAlert { background-color: #a6b779; }
#HTMLReporter .passingAlert:first-child { background-color: #5e7d00; }
#HTMLReporter .failingAlert { background-color: #cf867e; }
#HTMLReporter .failingAlert:first-child { background-color: #b03911; }
#HTMLReporter .results { margin-top: 14px; }
#HTMLReporter #details { display: none; }
#HTMLReporter .resultsMenu, #HTMLReporter .resultsMenu a { background-color: #fff; color: #333333; }
#HTMLReporter.showDetails .summaryMenuItem { font-weight: normal; text-decoration: inherit; }
#HTMLReporter.showDetails .summaryMenuItem:hover { text-decoration: underline; }
#HTMLReporter.showDetails .detailsMenuItem { font-weight: bold; text-decoration: underline; }
#HTMLReporter.showDetails .summary { display: none; }
#HTMLReporter.showDetails #details { display: block; }
#HTMLReporter .summaryMenuItem { font-weight: bold; text-decoration: underline; }
#HTMLReporter .summary { margin-top: 14px; }
#HTMLReporter .summary .suite .suite, #HTMLReporter .summary .specSummary { margin-left: 14px; }
#HTMLReporter .summary .specSummary.passed a { color: #5e7d00; }
#HTMLReporter .summary .specSummary.failed a { color: #b03911; }
#HTMLReporter .description + .suite { margin-top: 0; }
#HTMLReporter .suite { margin-top: 14px; }
#HTMLReporter .suite a { color: #333333; }
#HTMLReporter #details .specDetail { margin-bottom: 28px; }
#HTMLReporter #details .specDetail .description { display: block; color: white; background-color: #b03911; }
#HTMLReporter .resultMessage { padding-top: 14px; color: #333333; }
#HTMLReporter .resultMessage span.result { display: block; }
#HTMLReporter .stackTrace { margin: 5px 0 0 0; max-height: 224px; overflow: auto; line-height: 18px; color: #666666; border: 1px solid #ddd; background: white; white-space: pre; }

#TrivialReporter { padding: 8px 13px; position: absolute; top: 0; bottom: 0; left: 0; right: 0; overflow-y: scroll; background-color: white; font-family: "Helvetica Neue Light", "Lucida Grande", "Calibri", "Arial", sans-serif; /*.resultMessage {*/ /*white-space: pre;*/ /*}*/ }
#TrivialReporter a:visited, #TrivialReporter a { color: #303; }
#TrivialReporter a:hover, #TrivialReporter a:active { color: blue; }
#TrivialReporter .run_spec { float: right; padding-right: 5px; font-size: .8em; text-decoration: none; }
#TrivialReporter .banner { color: #303; background-color: #fef; padding: 5px; }
#TrivialReporter .logo { float: left; font-size: 1.1em; padding-left: 5px; }
#TrivialReporter .logo .version { font-size: .6em; padding-left: 1em; }
#TrivialReporter .runner.running { background-color: yellow; }
#TrivialReporter .options { text-align: right; font-size: .8em; }
#TrivialReporter .suite { border: 1px outset gray; margin: 5px 0; padding-left: 1em; }
#TrivialReporter .suite .suite { margin: 5px; }
#TrivialReporter .suite.passed { background-color: #dfd; }
#TrivialReporter .suite.failed { background-color: #fdd; }
#TrivialReporter .spec { margin: 5px; padding-left: 1em; clear: both; }
#TrivialReporter .spec.failed, #TrivialReporter .spec.passed, #TrivialReporter .spec.skipped { padding-bottom: 5px; border: 1px solid gray; }
#TrivialReporter .spec.failed { background-color: #fbb; border-color: red; }
#TrivialReporter .spec.passed { background-color: #bfb; border-color: green; }
#TrivialReporter .spec.skipped { background-color: #bbb; }
#TrivialReporter .messages { border-left: 1px dashed gray; padding-left: 1em; padding-right: 1em; }
#TrivialReporter .passed { background-color: #cfc; display: none; }
#TrivialReporter .failed { background-color: #fbb; }
#TrivialReporter .skipped { color: #777; background-color: #eee; display: none; }
#TrivialReporter .resultMessage span.result { display: block; line-height: 2em; color: black; }
#TrivialReporter .resultMessage .mismatch { color: black; }
#TrivialReporter .stackTrace { white-space: pre; font-size: .8em; margin-left: 10px; max-height: 5em; overflow: auto; border: 1px inset red; padding: 1em; background: #eef; }
#TrivialReporter .finished-at { padding-left: 1em; font-size: .6em; }
#TrivialReporter.show-passed .passed, #TrivialReporter.show-skipped .skipped { display: block; }
#TrivialReporter #jasmine_content { position: fixed; right: 100%; }
#TrivialReporter .runner { border: 1px solid gray; display: block; margin: 5px 0; padding: 2px 0 2px 10px; }

--- File: ./frontend/src/index.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App.tsx';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
--- File: ./frontend/src/App.tsx ---
import { useState } from 'react';
import { LandingPage } from './components/LandingPage.tsx';
import { Onboarding, UserData } from './components/Onboarding.tsx';
import { Dashboard } from './components/Dashboard.tsx';
import { MarketDataPage, ETFData } from './components/MarketDataPage.tsx';
import { ChatPage } from './components/ChatPage.tsx';
import { AppHeader } from './components/AppHeader.tsx';

type AppState = 'landing' | 'onboarding' | 'dashboard' | 'marketData' | 'chat';

export default function App() {
  const [currentState, setCurrentState] = useState<AppState>('landing');
  const [userData, setUserData] = useState<UserData | null>(null);

  const [marketData, setMarketData] = useState<ETFData[]>([]);
  const [isMarketDataLoading, setIsMarketDataLoading] = useState(false);
  const [marketDataError, setMarketDataError] = useState<string | null>(null);

  const fetchMarketData = async () => {
    setIsMarketDataLoading(true);
    setMarketDataError(null);
    try {
      const response = await fetch('http://127.0.0.1:5000/api/etfs/market-data');
      if (!response.ok) {
        const errorBody = await response.json();
        throw new Error(errorBody.error || 'Failed to fetch data from the backend.');
      }
      const data = await response.json();
      setMarketData(data);
    } catch (err: any) {
      setMarketDataError(err.message);
    } finally {
      setIsMarketDataLoading(false);
    }
  };
  
  const handleGoToMarketData = () => {
    if (marketData.length === 0 && !marketDataError) {
      fetchMarketData();
    }
    setCurrentState('marketData');
  };

  const handleGetStarted = () => {
    setCurrentState('onboarding');
  };

  const handleOnboardingComplete = (data: UserData) => {
    setUserData(data);
    setCurrentState('dashboard');
  };

  const handleBackToLanding = () => {
    setCurrentState('landing');
    setUserData(null);
  };

  const handleGoToDashboard = () => {
    if (userData) {
      setCurrentState('dashboard');
    } else {
      setCurrentState('onboarding');
    }
  };

  const handleGoToChat = () => {
    setCurrentState('chat');
  };
  
  // 1. The developer shortcut function is restored here
  const handleSkipToDashboard = async () => {
    try {
      const response = await fetch('http://127.0.0.1:5000/onboard/1');
      if (!response.ok) {
        throw new Error('Could not fetch profile for user 1. Make sure the user exists in your database.');
      }
      const profileData = await response.json();
      const transformedData: UserData = {
        name: profileData.name,
        age: profileData.age,
        investmentAmount: profileData.investment_amount,
        timeHorizon: profileData.time_horizon,
        riskTolerance: profileData.risk_tolerance,
        investmentGoals: profileData.investment_goals.split(', '),
        experience: profileData.experience,
        income: 50000, 
      };
      setUserData(transformedData);
      setCurrentState('dashboard');
    } catch (error) {
      console.error(error);
      alert(error);
    }
  };

  const renderContent = () => {
    switch (currentState) {
      case 'landing':
        return <LandingPage onGetStarted={handleGetStarted} />;
      
      case 'onboarding':
        return <Onboarding onComplete={handleOnboardingComplete} onBack={handleBackToLanding} />;
      
      case 'dashboard':
        return userData ? <Dashboard userData={userData} /> : <LandingPage onGetStarted={handleGetStarted} />;

      case 'marketData':
        return <MarketDataPage etfs={marketData} isLoading={isMarketDataLoading} error={marketDataError} />;
      
      case 'chat':
        return <ChatPage />;

      default:
        return <LandingPage onGetStarted={handleGetStarted} />;
    }
  };

  return (
    <>
      {currentState !== 'onboarding' && (
        <AppHeader
          isLoggedIn={!!userData}
          onGoHome={handleBackToLanding}
          onGetStarted={handleGetStarted}
          onNavigateToMarket={handleGoToMarketData}
          onNavigateToChat={handleGoToChat}
          onGoToDashboard={handleGoToDashboard}
          onSkipToDashboard={handleSkipToDashboard} // 2. Pass the function to the header
        />
      )}
      <main>
        {renderContent()}
      </main>
    </>
  );
}
--- File: ./frontend/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--background);
  color: var(--foreground);
}

:root {
  --background: #ffffff;
  --foreground: #252525;
  --card: #ffffff;
  --card-foreground: #252525;
  --popover: #ffffff;
  --popover-foreground: #252525;
  --primary: #030213;
  --primary-foreground: #ffffff;
  --secondary: #f4f4f5;
  --secondary-foreground: #030213;
  --muted: #f4f4f5;
  --muted-foreground: #71717a;
  --accent: #e9ebef;
  --accent-foreground: #030213;
  --destructive: #d4183d;
  --destructive-foreground: #ffffff;
  --border: #e4e4e7;
  --input: #e4e4e7;
  --ring: #a1a1aa;

  --radius: 0.5rem;
}

.dark {
  --background: #09090b;
  --foreground: #fafafa;
  --card: #09090b;
  --card-foreground: #fafafa;
  --popover: #09090b;
  --popover-foreground: #fafafa;
  --primary: #fafafa;
  --primary-foreground: #18181b;
  --secondary: #27272a;
  --secondary-foreground: #fafafa;
  --muted: #27272a;
  --muted-foreground: #a1a1aa;
  --accent: #27272a;
  --accent-foreground: #fafafa;
  --destructive: #7f1d1d;
  --destructive-foreground: #fafafa;
  --border: #27272a;
  --input: #27272a;
  --ring: #d4d4d8;

  --radius: 0.5rem;
}
--- File: ./frontend/src/components/ui/label.css ---
.label {
    font-size: 0.875rem;
    line-height: 1;
    font-weight: 500;
    user-select: none;
}

.label[data-disabled='true'] {
    cursor: not-allowed;
    opacity: 0.5;
}
--- File: ./frontend/src/components/ui/tabs.tsx ---
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";
import './tabs.css';

const Tabs = React.forwardRef<
    React.ElementRef<typeof TabsPrimitive.Root>,
    React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root>
>(({className, ...props}, ref) => (
    <TabsPrimitive.Root ref={ref} className={`tabs-root ${className || ''}`} {...props} />
));
Tabs.displayName = TabsPrimitive.Root.displayName;


const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={`tabs-list ${className || ''}`}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={`tabs-trigger ${className || ''}`}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={`tabs-content ${className || ''}`}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
--- File: ./frontend/src/components/ui/card.tsx ---
import * as React from "react";
import './card.css';

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`card ${className || ''}`}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`card-header ${className || ''}`}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h4
    ref={ref}
    className={`card-title ${className || ''}`}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={`card-description ${className || ''}`}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`card-content ${className || ''}`}
    {...props}
  />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`card-footer ${className || ''}`}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };
--- File: ./frontend/src/components/ui/progress.tsx ---
"use client";
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";
import './progress.css';

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={`progress-root ${className || ''}`}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="progress-indicator"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };
--- File: ./frontend/src/components/ui/card.css ---
.card {
  background-color: var(--card);
  color: var(--card-foreground);
  display: flex;
  flex-direction: column;
  gap: 1rem; /* Adjusted from gap-6 for better balance */
  border-radius: 0.75rem; /* rounded-xl */
  border: 1px solid var(--border);
  padding: 1.5rem; /* p-6 equivalent for the whole card */
}

.card-header {
  display: flex;
  flex-direction: column;
  gap: 0.375rem; /* gap-1.5 */
  padding: 0; /* Removed padding to avoid double padding */
}

.card-title {
  line-height: 1;
  font-weight: 600;
  font-size: 1.125rem; /* Corresponds to h4 in original globals */
}

.card-description {
  color: var(--muted-foreground);
  font-size: 0.875rem;
}

.card-content {
  padding: 0; /* Removed padding */
}

.card-footer {
  display: flex;
  align-items: center;
  padding: 0; /* Removed padding */
  margin-top: auto; /* Pushes footer to the bottom */
}
--- File: ./frontend/src/components/ui/tabs.css ---
.tabs-root {
  display: flex;
  flex-direction: column;
}

.tabs-list {
  display: inline-flex;
  height: 2.25rem;
  align-items: center;
  justify-content: center;
  border-radius: 0.75rem; /* rounded-xl */
  background-color: var(--muted);
  color: var(--muted-foreground);
  padding: 3px;
}

.tabs-trigger {
  display: inline-flex;
  flex: 1;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
  border-radius: 0.6rem; /* a bit less than parent for inset effect */
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s;
  outline: none;
  border: 1px solid transparent;
  cursor: pointer;
  height: 100%;
}

.tabs-trigger:focus-visible {
  box-shadow: 0 0 0 3px var(--ring);
}

.tabs-trigger[data-state='active'] {
  background-color: var(--card);
  color: var(--foreground);
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
}

.tabs-content {
  margin-top: 0.5rem;
  outline: none;
}
--- File: ./frontend/src/components/ui/progress.css ---
.progress-root {
  position: relative;
  height: 0.5rem;
  width: 100%;
  overflow: hidden;
  border-radius: 9999px;
  background-color: #e5e7eb; /* primary/20 equivalent */
}

.progress-indicator {
  height: 100%;
  width: 100%;
  flex: 1;
  background-color: var(--primary);
  transition: transform 660ms cubic-bezier(0.65, 0, 0.35, 1);
}
--- File: ./frontend/src/components/ui/label.tsx ---
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import './label.css';

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={`label ${className || ''}`}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
--- File: ./frontend/src/components/ui/select.css ---
/* Using native select for simplicity. You can rebuild with Radix for full customization */
.select-trigger {
  display: flex;
  height: 2.25rem;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  background-color: var(--background);
  padding: 0.5rem 0.75rem;
  font-size: 0.875rem;
  outline: none;
  transition: all 0.2s;
  cursor: pointer;
}
.select-trigger:focus-visible {
    border-color: var(--ring);
    box-shadow: 0 0 0 3px var(--ring);
}
.select-content {
    position: relative;
    z-index: 50;
    min-width: 8rem;
    overflow: hidden;
    border-radius: var(--radius);
    border: 1px solid var(--border);
    background-color: var(--popover);
    color: var(--popover-foreground);
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
}
.select-item {
    position: relative;
    display: flex;
    width: 100%;
    cursor: default;
    user-select: none;
    align-items: center;
    border-radius: 0.25rem;
    padding: 0.375rem 0.5rem 0.375rem 2rem;
    font-size: 0.875rem;
    outline: none;
}
.select-item[data-highlighted] {
    background-color: var(--accent);
    color: var(--accent-foreground);
}
.select-item-indicator {
    position: absolute;
    left: 0.5rem;
    display: flex;
    height: 0.875rem;
    width: 0.875rem;
    align-items: center;
    justify-content: center;
}
--- File: ./frontend/src/components/ui/input.css ---
.input {
  display: flex;
  height: 2.25rem;
  width: 100%;
  min-width: 0;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  background-color: var(--background);
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
  transition: all 0.2s;
  outline: none;
}

.input::placeholder {
  color: var(--muted-foreground);
}

.input:focus-visible {
  border-color: var(--ring);
  box-shadow: 0 0 0 3px var(--ring);
}

.input:disabled {
  pointer-events: none;
  cursor: not-allowed;
  opacity: 0.5;
}
--- File: ./frontend/src/components/ui/radio-group.tsx ---
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";
import './radio-group.css';

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={`radio-group-root ${className || ''}`}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={`radio-group-item ${className || ''}`}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="radio-group-indicator">
        <Circle className="radio-group-indicator-icon" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
--- File: ./frontend/src/components/ui/table.css ---
.table-container {
    width: 100%;
    overflow-x: auto;
    border: 1px solid var(--border);
    border-radius: var(--radius);
}

.table {
    width: 100%;
    caption-side: bottom;
    font-size: 0.875rem; /* text-sm */
    border-collapse: collapse;
}

.table-header {
    border-bottom: 1px solid var(--border);
}

.table-row {
    border-bottom: 1px solid var(--border);
    transition: background-color 0.2s;
}

.table-body .table-row:last-child {
    border-bottom: 0;
}

.table-row:hover {
    background-color: var(--muted);
}

.table-head {
    height: 2.5rem; /* h-10 */
    padding: 0 1rem; /* px-4 */
    text-align: left;
    vertical-align: middle;
    font-weight: 500;
    color: var(--muted-foreground);
    white-space: nowrap;
}

.table-cell {
    padding: 0.75rem 1rem; /* p-3 px-4 */
    vertical-align: middle;
    white-space: nowrap;
}

/* For coloring the YTD return */
.positive-return {
    color: #16a34a; /* green-600 */
}

.negative-return {
    color: #dc2626; /* red-600 */
}
--- File: ./frontend/src/components/ui/badge.css ---
.badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius);
  border: 1px solid var(--border);
  padding: 0.125rem 0.5rem; /* py-0.5 px-2 */
  font-size: 0.75rem; /* text-xs */
  font-weight: 500;
  width: fit-content;
  white-space: nowrap;
  transition: all 0.2s;
}

.badge.variant-default {
  border-color: transparent;
  background-color: var(--primary);
  color: var(--primary-foreground);
}
.badge.variant-secondary {
  border-color: transparent;
  background-color: var(--secondary);
  color: var(--secondary-foreground);
}
.badge.variant-destructive {
  border-color: transparent;
  background-color: var(--destructive);
  color: var(--destructive-foreground);
}
.badge.variant-outline {
  color: var(--foreground);
}
--- File: ./frontend/src/components/ui/button.css ---
.button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    white-space: nowrap;
    border-radius: var(--radius);
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 500;
    transition: all 0.2s;
    outline: none;
    border: 1px solid transparent;
}

.button:disabled {
    pointer-events: none;
    opacity: 0.5;
}

.button:focus-visible {
    box-shadow: 0 0 0 3px var(--ring);
}

/* Variants */
.button.variant-default {
    background-color: var(--primary);
    color: var(--primary-foreground);
}
.button.variant-default:hover {
    background-color: #3a3a3a; /* A slightly lighter shade for hover */
}
.dark .button.variant-default:hover {
    background-color: #e0e0e0; /* A slightly darker shade for hover in dark mode */
}


.button.variant-destructive {
    background-color: var(--destructive);
    color: var(--destructive-foreground);
}
.button.variant-destructive:hover {
    background-color: #b91c1c;
}

.button.variant-outline {
    border: 1px solid var(--border);
    background-color: var(--background);
    color: var(--foreground);
}
.button.variant-outline:hover {
    background-color: var(--accent);
    color: var(--accent-foreground);
}

.button.variant-secondary {
    background-color: var(--secondary);
    color: var(--secondary-foreground);
}
.button.variant-secondary:hover {
    background-color: #e4e4e7;
}

.button.variant-ghost {
    background-color: transparent;
}
.button.variant-ghost:hover {
    background-color: var(--accent);
    color: var(--accent-foreground);
}

.button.variant-link {
    color: var(--primary);
    text-decoration: underline;
    text-underline-offset: 4px;
}
.button.variant-link:hover {
    text-decoration-thickness: 2px;
}

/* Sizes */
.button.size-default {
    height: 2.25rem;
    padding: 0.5rem 1rem;
}

.button.size-sm {
    height: 2rem;
    border-radius: var(--radius);
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
}

.button.size-lg {
    height: 2.5rem;
    border-radius: var(--radius);
    padding: 0.5rem 1.5rem;
}

.button.size-icon {
    height: 2.25rem;
    width: 2.25rem;
    border-radius: var(--radius);
}
--- File: ./frontend/src/components/ui/badge.tsx ---
import * as React from "react";
import './badge.css';

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "secondary" | "destructive" | "outline";
}

function Badge({ className, variant = 'default', ...props }: BadgeProps) {
  const classNames = [
    'badge',
    `variant-${variant}`,
    className
  ].filter(Boolean).join(' ');
  return (
    <div className={classNames} {...props} />
  );
}

export { Badge };
--- File: ./frontend/src/components/ui/table.tsx ---
import * as React from "react";
import './table.css';

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(({ className, ...props }, ref) => (
  <div className="table-container">
    <table ref={ref} className={`table ${className || ''}`} {...props} />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => (
  <thead ref={ref} className={`table-header ${className || ''}`} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(({ className, ...props }, ref) => (
  <tbody ref={ref} className={`table-body ${className || ''}`} {...props} />
));
TableBody.displayName = "TableBody";

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(({ className, ...props }, ref) => (
  <tr ref={ref} className={`table-row ${className || ''}`} {...props} />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => (
  <th ref={ref} className={`table-head ${className || ''}`} {...props} />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(({ className, ...props }, ref) => (
  <td ref={ref} className={`table-cell ${className || ''}`} {...props} />
));
TableCell.displayName = "TableCell";

export { Table, TableHeader, TableBody, TableHead, TableRow, TableCell };
--- File: ./frontend/src/components/ui/button.tsx ---
import * as React from "react";
import './button.css';

type ButtonVariant = 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
type ButtonSize = 'default' | 'sm' | 'lg' | 'icon';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'default', size = 'default', ...props }, ref) => {
    const classNames = [
      'button',
      `variant-${variant}`,
      `size-${size}`,
      className
    ].filter(Boolean).join(' ');

    return (
      <button
        className={classNames}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button };
--- File: ./frontend/src/components/ui/select.tsx ---
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown } from "lucide-react";
import './select.css';

const Select = SelectPrimitive.Root;
const SelectGroup = SelectPrimitive.Group;
const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={`select-trigger ${className || ''}`}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown style={{ height: '1rem', width: '1rem', opacity: 0.5 }} />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={`select-content ${className || ''}`}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport style={{padding: '0.25rem'}}>
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={`select-item ${className || ''}`}
    {...props}
  >
    <span className="select-item-indicator">
      <SelectPrimitive.ItemIndicator>
        <Check style={{ height: '1rem', width: '1rem' }} />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectItem,
};
--- File: ./frontend/src/components/ui/input.tsx ---
import * as React from "react";
import './input.css';

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={`input ${className || ''}`}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = "Input";

export { Input };
--- File: ./frontend/src/components/ui/radio-group.css ---
.radio-group-root {
  display: grid;
  gap: 0.75rem;
}

.radio-group-item {
  aspect-ratio: 1 / 1;
  width: 1rem;
  height: 1rem;
  flex-shrink: 0;
  border-radius: 9999px;
  border: 1px solid var(--input);
  color: var(--primary);
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  transition: all 0.2s;
  outline: none;
}

.radio-group-item:focus-visible {
  box-shadow: 0 0 0 3px var(--ring);
}

.radio-group-item[data-state='checked'] {
  border-color: var(--primary);
}

.radio-group-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.radio-group-indicator-icon {
  fill: var(--primary);
  position: absolute;
  top: 50%;
  left: 50%;
  width: 0.5rem;
  height: 0.5rem;
  transform: translate(-50%, -50%);
}
--- File: ./frontend/src/components/LandingPage.css ---
.landing-page {
  min-height: 100vh;
  background-image: linear-gradient(to bottom right, #eff6ff, white, #faf5ff);
}

.header {
  border-bottom: 1px solid var(--border);
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(4px);
  position: sticky;
  top: 0;
  z-index: 50;
}

.container {
  max-width: 1280px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding-top: 1rem;
  padding-bottom: 1rem;
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logo-icon-wrapper {
  width: 2rem;
  height: 2rem;
  background-image: linear-gradient(to right, #2563eb, #9333ea);
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.logo-icon {
  width: 1.25rem;
  height: 1.25rem;
  color: white;
}

.logo-text {
  font-size: 1.25rem;
  font-weight: 600;
  color: #111827;
}

.get-started-btn {
  background-image: linear-gradient(to right, #2563eb, #9333ea);
}

.get-started-btn:hover {
  background-image: linear-gradient(to right, #1d4ed8, #7e22ce);
}

.hero-section {
  padding-top: 4rem;
  padding-bottom: 4rem;
  text-align: center;
}

.hero-badge {
  margin-bottom: 1rem;
  background-color: #dbeafe;
  color: #1e40af;
}

.hero-title {
  font-size: 2.25rem;
  line-height: 2.5rem;
  font-weight: 700;
  color: transparent;
  background-clip: text;
  -webkit-background-clip: text;
  background-image: linear-gradient(to right, #2563eb, #9333ea);
  margin-bottom: 1.5rem;
}

@media (min-width: 768px) {
  .hero-title {
    font-size: 3.75rem;
    line-height: 1.2;
  }
}

.hero-subtitle {
  font-size: 1.25rem;
  line-height: 1.75rem;
  color: #4b5563;
  margin-bottom: 1rem;
  max-width: 42rem;
  margin-left: auto;
  margin-right: auto;
}

.hero-description {
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #6b7280;
  margin-bottom: 2rem;
  max-width: 48rem;
  margin-left: auto;
  margin-right: auto;
}

.hero-actions {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  justify-content: center;
  align-items: center;
}

@media (min-width: 640px) {
  .hero-actions {
    flex-direction: row;
  }
}

.large-btn {
  padding: 0.75rem 2rem;
  font-size: 1rem; /* Adjust based on your ui/button styles */
}

.features-section {
  padding-top: 4rem;
  padding-bottom: 4rem;
}

.section-title {
  text-align: center;
  margin-bottom: 3rem;
}

.section-heading {
  font-size: 1.875rem;
  line-height: 2.25rem;
  font-weight: 700;
  color: #111827;
  margin-bottom: 1rem;
}

.section-subheading {
  font-size: 1.125rem;
  line-height: 1.75rem;
  color: #4b5563;
  max-width: 42rem;
  margin-left: auto;
  margin-right: auto;
}

.features-grid {
  display: grid;
  gap: 2rem;
}

@media (min-width: 768px) {
  .features-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

.feature-card {
  border: none;
  box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

.feature-icon-wrapper {
  width: 3rem;
  height: 3rem;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 1rem;
}

.icon-brain {
  background-color: #dbeafe;
  color: #2563eb;
}
.icon-chart {
  background-color: #dcfce7;
  color: #16a34a;
}
.icon-shield {
  background-color: #f3e8ff;
  color: #9333ea;
}

.feature-icon {
  width: 1.5rem;
  height: 1.5rem;
}

.how-it-works-section {
  background-color: #f9fafb;
  padding-top: 4rem;
  padding-bottom: 4rem;
}

.how-it-works-grid {
  display: grid;
  gap: 2rem;
}

@media (min-width: 768px) {
  .how-it-works-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

.step {
  text-align: center;
}

.step-icon-wrapper {
  width: 4rem;
  height: 4rem;
  border-radius: 9999px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 1rem;
}

.step-icon {
  width: 2rem;
  height: 2rem;
  color: white;
}

.step-icon-1 { background-color: #2563eb; }
.step-icon-2 { background-color: #16a34a; }
.step-icon-3 { background-color: #9333ea; }
.step-icon-4 { background-color: #d97706; }

.step-title {
  font-weight: 600;
  color: #111827;
  margin-bottom: 0.5rem;
}

.step-description {
  color: #4b5563;
}

.cta-section {
  padding-top: 4rem;
  padding-bottom: 4rem;
  text-align: center;
}

.footer {
  background-color: #111827;
  color: white;
  padding-top: 2rem;
  padding-bottom: 2rem;
}

.footer-content {
  text-align: center;
}

.footer-logo {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.footer-logo-icon-wrapper {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 0.25rem;
  background-image: linear-gradient(to right, #2563eb, #9333ea);
  display: flex;
  align-items: center;
  justify-content: center;
}

.footer-logo-icon {
  width: 1rem;
  height: 1rem;
  color: white;
}

.footer-text {
  color: #9ca3af;
}
--- File: ./frontend/src/components/Dashboard.tsx ---
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card.tsx";
import { Badge } from "./ui/badge.tsx";
import { Button } from "./ui/button.tsx";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs.tsx";
import { Progress } from "./ui/progress.tsx";
import {
  TrendingUp,
  Shield,
  DollarSign,
  Target,
  PieChart,
  Lightbulb
} from "lucide-react";
import { UserData } from "./Onboarding.tsx";
import { HistoricalChart } from "./HistoricalChart.tsx";
import './Dashboard.css';
import './MarketDataPage.css';

interface RecommendedETF {
  symbol: string;
  name: string;
  category: string;
  allocation: number;
  investment_amount: number;
  historical_data: { date: string, close_price: number }[];
}

interface PortfolioProjection {
  year: number;
  conservative: number;
  expected: number;
  optimistic: number;
}

interface PortfolioResponse {
  nuanced_risk_score: number;
  risk_tolerance_original: string;
  expected_annual_return: number;
  recommended_portfolio: RecommendedETF[];
  projections: PortfolioProjection[];
}

// The props are now much simpler
interface DashboardProps {
  userData: UserData;
}

export function Dashboard({ userData }: DashboardProps) {
  const [activeView, setActiveView] = useState("overview");
  const firstName = userData.name.split(' ')[0];

  const [portfolio, setPortfolio] = useState<PortfolioResponse | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchDashboardData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const response = await fetch('http://127.0.0.1:5000/api/recommend', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            age: userData.age,
            income: userData.income,
            investmentAmount: userData.investmentAmount,
            timeHorizon: userData.timeHorizon,
            riskTolerance: userData.riskTolerance,
            experience: userData.experience
          }),
        });
        if (!response.ok) {
          const errData = await response.json();
          throw new Error(errData.error || "Failed to fetch recommendation and projections.");
        }
        const data: PortfolioResponse = await response.json();
        setPortfolio(data);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDashboardData();
  }, [userData]);

  if (isLoading) {
    // Adjusted height to account for the global header
    return <div className="loading-container" style={{height: 'calc(100vh - 75px)'}}>Generating Your Personalized Plan...</div>;
  }

  if (error || !portfolio) {
    // The user can now use the global header to navigate away from an error
    return <div className="error-container" style={{margin: '2rem'}}>
        <h2>Could Not Generate Plan</h2>
        <p>Error: {error || "An unknown error occurred."}</p>
    </div>;
  }
  
  return (
    <div className="dashboard-page">
      {/* The old <header> section is now GONE */}

      <div className="container dashboard-body">
        <div className="welcome-section">
          <h1 className="welcome-title">{firstName}'s Personalized Investment Plan</h1>
          <p className="welcome-subtitle">Welcome back! Based on your full profile, we've created this data-driven portfolio to help you reach your goals.</p>
        </div>

        <div className="metrics-grid">
          <Card>
            <CardHeader className="metric-card-header">
              <CardTitle className="metric-card-title">Investment Amount</CardTitle>
              <DollarSign className="metric-card-icon" />
            </CardHeader>
            <CardContent>
              <div className="metric-card-value">${userData.investmentAmount.toLocaleString()}</div>
              <p className="metric-card-subtext">Initial investment</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="metric-card-header">
              <CardTitle className="metric-card-title">Risk Level</CardTitle>
              <Shield className="metric-card-icon" />
            </CardHeader>
            <CardContent>
              <div className="metric-card-value">{portfolio.nuanced_risk_score.toFixed(1)}/10</div>
              <p className="metric-card-subtext" style={{textTransform: 'capitalize'}}>{portfolio.risk_tolerance_original} (Adjusted Score)</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="metric-card-header">
              <CardTitle className="metric-card-title">Time Horizon</CardTitle>
              <Target className="metric-card-icon" />
            </CardHeader>
            <CardContent>
              <div className="metric-card-value">
                {userData.timeHorizon === 'short' ? '1-3' : userData.timeHorizon === 'medium' ? '3-10' : '10+'} yrs
              </div>
              <p className="metric-card-subtext">Investment timeline</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="metric-card-header">
              <CardTitle className="metric-card-title">Expected Annual Return</CardTitle>
              <TrendingUp className="metric-card-icon" />
            </CardHeader>
            <CardContent>
              <div className="metric-card-value">
                {portfolio.expected_annual_return.toFixed(2)}%
              </div>
              <p className="metric-card-subtext">Data-driven projection (1-Yr Avg)</p>
            </CardContent>
          </Card>
        </div>

        <Tabs value={activeView} onValueChange={setActiveView} className="tabs-container">
          <TabsList className="tabs-grid">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="portfolio">Portfolio</TabsTrigger>
            <TabsTrigger value="projections">Projections</TabsTrigger>
            <TabsTrigger value="education">Education</TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <div className="overview-grid">
              <Card>
                <CardHeader>
                  <CardTitle className="card-title-flex">
                    <PieChart className="card-title-icon" />
                    <span>Portfolio Allocation</span>
                  </CardTitle>
                </CardHeader>
                <CardContent style={{display: 'flex', flexDirection: 'column', gap: '1rem'}}>
                  {[...portfolio.recommended_portfolio]
                    .sort((a, b) => b.allocation - a.allocation || a.category.localeCompare(b.category))
                    .map((etf) => (
                      <div key={etf.symbol} className="allocation-item">
                        <div className="allocation-labels">
                          <span className="allocation-category">{etf.category}</span>
                          <span className="allocation-percentage">{etf.allocation}%</span>
                        </div>
                        <Progress value={etf.allocation} className="allocation-progress" />
                      </div>
                  ))}
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                    <CardTitle className="card-title-flex">
                        <Lightbulb className="card-title-icon" />
                        <span>Key Insights</span>
                    </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="insights-list">
                    <li className="insight-item dot-blue"><div><p className="insight-text-title">Data-Driven</p><p className="insight-text-desc">This portfolio is generated based on historical data analysis.</p></div></li>
                    <li className="insight-item dot-green"><div><p className="insight-text-title">Truly Personalized</p><p className="insight-text-desc">The asset mix is tailored to your entire profile, not just one answer.</p></div></li>
                    <li className="insight-item dot-purple"><div><p className="insight-text-title">Diversified</p><p className="insight-text-desc">Your investment is spread across different asset classes to manage risk.</p></div></li>
                  </ul>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="portfolio">
            <div className="portfolio-list">
              {[...portfolio.recommended_portfolio]
                .sort((a, b) => b.allocation - a.allocation || a.name.localeCompare(b.name))
                .map((etf) => (
                  <Card key={etf.symbol}>
                    <CardHeader>
                      <CardTitle className="etf-card-title">{etf.symbol} - {etf.name}</CardTitle>
                      <CardDescription>{etf.category}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="etf-details-grid">
                        <div>
                          <p className="etf-detail-label">Allocation</p>
                          <p className="etf-detail-value etf-detail-value-blue">{etf.allocation}%</p>
                        </div>
                        <div>
                          <p className="etf-detail-label">Investment Amount</p>
                          <p className="etf-detail-value">${etf.investment_amount.toLocaleString()}</p>
                        </div>
                      </div>
                      <h4 style={{ fontWeight: 500, fontSize: '0.875rem', borderTop: '1px solid #eee', paddingTop: '1rem' }}>
                        1-Year Performance
                      </h4>
                      <HistoricalChart data={etf.historical_data} />
                    </CardContent>
                  </Card>
              ))}
            </div>
          </TabsContent>
          
          <TabsContent value="projections">
             <Card>
                <CardHeader>
                    <CardTitle>Growth Projections</CardTitle>
                    <CardDescription>
                        Portfolio value over time based on a Monte Carlo simulation of 500 possible futures.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="projections-list">
                    {portfolio.projections.map((projection) => (
                        <div key={projection.year} className="projection-item">
                            <div className="projection-header">
                            <span className="projection-year">Year {projection.year}</span>
                            <span className="projection-expected">Expected: ${projection.expected.toLocaleString()}</span>
                            </div>
                            <div className="projection-scenarios-grid">
                            <div className="scenario-box scenario-conservative"><p className="scenario-title">Conservative</p><p>${projection.conservative.toLocaleString()}</p></div>
                            <div className="scenario-box scenario-expected"><p className="scenario-title">Expected</p><p>${projection.expected.toLocaleString()}</p></div>
                            <div className="scenario-box scenario-optimistic"><p className="scenario-title">Optimistic</p><p>${projection.optimistic.toLocaleString()}</p></div>
                            </div>
                        </div>
                    ))}
                    </div>
                </CardContent>
                </Card>
          </TabsContent>

          <TabsContent value="education">
             <div className="education-grid">
                <Card style={{ gap: '0.75rem' }}>
                    <CardHeader><CardTitle>Understanding ETFs</CardTitle></CardHeader>
                    <CardContent style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
                        <p className="education-text">Exchange-Traded Funds (ETFs) are investment funds that trade on stock exchanges like individual stocks. They offer instant diversification by holding many different stocks or bonds.</p>
                        <div>
                        <h4 style={{ fontWeight: 500, marginBottom: '0.5rem' }}>Benefits of ETFs:</h4>
                        <ul className="education-list" style={{ paddingLeft: '20px' }}>
                            <li>Low fees compared to mutual funds</li>
                            <li>Instant diversification</li>
                            <li>Easy to buy and sell</li>
                            <li>Transparent holdings</li>
                        </ul>
                        </div>
                    </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <CardTitle>Investment Principles</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="insights-list">
                      <li className="insight-item dot-blue"><div><p className="insight-text-title">Diversification</p><p className="insight-text-desc">Don't put all your eggs in one basket. Spread risk across different investments.</p></div></li>
                      <li className="insight-item dot-green"><div><p className="insight-text-title">Time in Market</p><p className="insight-text-desc">Focus on time in the market, not timing it. Patient investing yields better results.</p></div></li>
                      <li className="insight-item dot-purple"><div><p className="insight-text-title">Keep Costs Low</p><p className="insight-text-desc">High fees are a drag on performance. Prioritize low-cost funds to maximize returns.</p></div></li>
                      <li className="insight-item dot-orange"><div><p className="insight-text-title">Invest Consistently</p><p className="insight-text-desc">Make investing a regular habit. This discipline is the key to long-term growth.</p></div></li>
                    </ul>
                  </CardContent>
                </Card>
            </div>
          </TabsContent>
        </Tabs>

        <Card style={{marginTop: '2rem'}}>
          <CardHeader>
            <CardTitle>Ready to Start Investing?</CardTitle>
            <CardDescription>
              Your personalized plan is ready. Here's how to get started with your investment journey.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="action-buttons">
              <Button className="action-btn-primary">
                Connect Your Brokerage Account
              </Button>
              <Button variant="outline">
                Download Plan PDF
              </Button>
              <Button variant="outline">
                Schedule a Call
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
--- File: ./frontend/src/components/Dashboard.css ---
.dashboard-page {
  min-height: 100vh;
  background-image: linear-gradient(to bottom right, #eff6ff, white, #faf5ff);
}

.dashboard-header {
  border-bottom: 1px solid var(--border);
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(4px);
  position: sticky;
  top: 0;
  z-index: 50;
}

.container {
  max-width: 1280px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem 0;
}

.header-left {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.logo-icon-wrapper {
  width: 2rem;
  height: 2rem;
  background-image: linear-gradient(to right, #2563eb, #9333ea);
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.logo-icon {
  width: 1.25rem;
  height: 1.25rem;
  color: white;
}

.logo-text {
  font-size: 1.25rem;
  font-weight: 600;
  color: #111827;
}

.status-badge {
    background-color: #dcfce7;
    color: #15803d;
}

.dashboard-body {
    padding-top: 2rem;
    padding-bottom: 2rem;
}

.welcome-section {
  margin-bottom: 2rem;
}

.welcome-title {
  font-size: 1.875rem; /* text-3xl */
  line-height: 2.25rem;
  font-weight: 700;
  color: #111827;
  margin-bottom: 0.5rem;
}

.welcome-subtitle {
  font-size: 1.125rem; /* text-lg */
  line-height: 1.75rem;
  color: #4b5563;
}

.metrics-grid {
  display: grid;
  gap: 1.5rem;
  margin-bottom: 2rem;
}
@media (min-width: 768px) {
    .metrics-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

.metric-card-header {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 0.5rem;
}

.metric-card-title {
    font-size: 0.875rem;
    font-weight: 500;
}

.metric-card-icon {
    height: 1rem;
    width: 1rem;
    color: var(--muted-foreground);
}

.metric-card-value {
    font-size: 1.5rem; /* text-2xl */
    line-height: 2rem;
    font-weight: 700;
}

.metric-card-subtext {
    font-size: 0.75rem;
    line-height: 1rem;
    color: var(--muted-foreground);
    text-transform: capitalize;
}

.tabs-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.tabs-grid {
    display: grid;
    width: 100%;
    grid-template-columns: repeat(4, 1fr);
}

.overview-grid, .education-grid {
    display: grid;
    gap: 1.5rem;
}
@media (min-width: 768px) {
    .overview-grid, .education-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

.card-title-flex {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.card-title-icon {
    width: 1.25rem;
    height: 1.25rem;
}

.allocation-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.allocation-labels {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.allocation-category {
    font-weight: 500;
}

.allocation-percentage {
    font-size: 0.875rem;
    color: #4b5563;
}

.allocation-progress {
    height: 0.5rem;
}

ul.insights-list {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  list-style: none;
  padding-left: 0;
  margin: 0;
}

li.insight-item {
  position: relative;
  padding-left: 1.25rem;
}

li.insight-item::before {
  content: '';
  position: absolute;
  left: 0;

  top: 0.7em; 
  transform: translateY(-50%);

  width: 0.5rem;
  height: 0.5rem;
  border-radius: 9999px;
}

.insight-item.dot-blue::before { background-color: #3b82f6; }
.insight-item.dot-green::before { background-color: #22c55e; }
.insight-item.dot-purple::before { background-color: #8b5cf6; }
.insight-item.dot-orange::before { background-color: #f97316; }


.insight-text-title {
  font-weight: 500;
  margin: 0;
}
.insight-text-desc {
  font-size: 0.875rem;
  color: #4b5563;
  margin: 0;
}

.portfolio-list, .projections-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.etf-card-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.etf-card-title {
    font-size: 1.125rem;
}

.risk-badge-low {
    background-color: var(--secondary);
    color: var(--secondary-foreground);
}
.risk-badge-medium {
    background-color: var(--primary);
    color: var(--primary-foreground);
}
.risk-badge-high {
    background-color: var(--destructive);
    color: var(--destructive-foreground);
}

.etf-details-grid {
    display: grid;
    gap: 1rem;
    margin-bottom: 1rem;
}
@media (min-width: 768px) {
    .etf-details-grid {
        grid-template-columns: repeat(3, 1fr);
    }
}

.etf-detail-label {
    font-size: 0.875rem;
    color: #4b5563;
}
.etf-detail-value {
    font-size: 1.5rem;
    font-weight: 700;
}
.etf-detail-value-blue { color: #2563eb; }
.etf-detail-value-green { color: #16a34a; }


.recommendation-box {
    background-color: #eff6ff;
    border-radius: 0.5rem;
    padding: 1rem;
}
.recommendation-title {
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
}
.recommendation-icon {
    width: 1rem;
    height: 1rem;
}
.recommendation-text {
    font-size: 0.875rem;
    color: #374151;
}

.projection-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.projection-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.projection-year {
    font-weight: 500;
}

.projection-expected {
    font-size: 0.875rem;
    color: #4b5563;
}
.projection-scenarios-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
    font-size: 0.875rem;
    text-align: center;
}

.scenario-box {
    padding: 0.5rem;
    border-radius: 0.25rem;
}

.scenario-conservative {
    background-color: #fee2e2;
}
.scenario-conservative .scenario-title {
    color: #dc2626;
    font-weight: 500;
}

.scenario-expected {
    background-color: #dbeafe;
}
.scenario-expected .scenario-title {
    color: #2563eb;
    font-weight: 500;
}

.scenario-optimistic {
    background-color: #dcfce7;
}
.scenario-optimistic .scenario-title {
    color: #16a34a;
    font-weight: 500;
}

.education-text, .principles-text {
    font-size: 0.875rem;
    color: #374151;
}

.education-list {
    font-size: 0.875rem;
    color: #374151;
    list-style-type: disc;
    list-style-position: inside;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.action-buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}
@media (min-width: 640px) {
    .action-buttons {
        flex-direction: row;
    }
}

.action-btn-primary {
    background-image: linear-gradient(to right, #2563eb, #9333ea);
}
.action-btn-primary:hover {
    background-image: linear-gradient(to right, #1d4ed8, #7e22ce);
}
--- File: ./frontend/src/components/LandingPage.tsx ---
import { Button } from "./ui/button.tsx";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "./ui/card.tsx";
import { TrendingUp, Shield, Brain, BarChart3, Users } from "lucide-react";
import './LandingPage.css';

// The props are now simpler, as the header is handled globally.
interface LandingPageProps {
  onGetStarted: () => void;
}

export function LandingPage({ onGetStarted }: LandingPageProps) {
  return (
    <div className="landing-page-content">
      {/* The old <header> section is now completely removed from this file */}
      
      <section className="container hero-section">
        <h1 className="hero-title" style={{ lineHeight: 1.2 }}>
          Personalized Wealth Planning, Powered by AI
        </h1>
        <p className="hero-subtitle">Your path to clear, confident investing</p>
        <p className="hero-description">
          AI-powered guidance, real market data, and personalized financial planning — built for people, not portfolios.
        </p>
        <div className="hero-actions">
          <Button onClick={onGetStarted} size="lg" className="get-started-btn large-btn">
            Start Your Financial Journey
          </Button>
          <Button variant="outline" size="lg" className="large-btn">
            Learn More
          </Button>
        </div>
      </section>

      <section className="container features-section">
        <div className="section-title">
          <h2 className="section-heading">Why Choose Finora?</h2>
          <p className="section-subheading">
            We make investing accessible for everyone, from first-time investors to experienced professionals.
          </p>
        </div>
        <div className="features-grid">
          <Card className="feature-card">
            <CardHeader style={{textAlign: 'center'}}>
              <div className="feature-icon-wrapper icon-brain">
                <Brain className="feature-icon" />
              </div>
              <CardTitle>AI-Powered Insights</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription style={{textAlign: 'center'}}>
                Get personalized investment recommendations based on your goals, risk tolerance, and financial situation using advanced AI analysis.
              </CardDescription>
            </CardContent>
          </Card>
          <Card className="feature-card">
            <CardHeader style={{textAlign: 'center'}}>
              <div className="feature-icon-wrapper icon-chart">
                <BarChart3 className="feature-icon" />
              </div>
              <CardTitle>Real Market Data</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription style={{textAlign: 'center'}}>
                Access live US market data and ETF information to make informed decisions with up-to-date financial insights.
              </CardDescription>
            </CardContent>
          </Card>
          <Card className="feature-card">
            <CardHeader style={{textAlign: 'center'}}>
              <div className="feature-icon-wrapper icon-shield">
                <Shield className="feature-icon" />
              </div>
              <CardTitle>Simple & Secure</CardTitle>
            </CardHeader>
            <CardContent>
              <CardDescription style={{textAlign: 'center'}}>
                Easy-to-understand explanations and secure platform designed for everyday people, not just financial experts.
              </CardDescription>
            </CardContent>
          </Card>
        </div>
      </section>

      <section className="how-it-works-section">
        <div className="container">
          <div className="section-title">
            <h2 className="section-heading">How Finora Works</h2>
            <p className="section-subheading">
              Get started with personalized wealth planning in just a few simple steps.
            </p>
          </div>
          <div className="how-it-works-grid">
            <div className="step">
              <div className="step-icon-wrapper step-icon-1">
                <Users className="step-icon" />
              </div>
              <h3 className="step-title">1. Tell Us About You</h3>
              <p className="step-description">Share your age, income, financial goals, and risk preferences.</p>
            </div>
            <div className="step">
              <div className="step-icon-wrapper step-icon-2">
                <Brain className="step-icon" />
              </div>
              <h3 className="step-title">2. AI Analysis</h3>
              <p className="step-description">Our AI analyzes your profile and market conditions to create your plan.</p>
            </div>
            <div className="step">
              <div className="step-icon-wrapper step-icon-3">
                <BarChart3 className="step-icon" />
              </div>
              <h3 className="step-title">3. Get Your Plan</h3>
              <p className="step-description">Receive personalized ETF recommendations with clear explanations.</p>
            </div>
            <div className="step">
              <div className="step-icon-wrapper step-icon-4">
                <TrendingUp className="step-icon" />
              </div>
              <h3 className="step-title">4. Start Investing</h3>
              <p className="step-description">Follow your plan and track your progress with ongoing guidance.</p>
            </div>
          </div>
        </div>
      </section>

      <section className="container cta-section">
        <h2 className="section-heading">Ready to Start Building Your Wealth?</h2>
        <p className="section-subheading" style={{marginBottom: '2rem'}}>
          Join thousands of people who are already using Finora to make smarter investment decisions.
        </p>
        <Button onClick={onGetStarted} size="lg" className="get-started-btn large-btn">
          Get Started for Free
        </Button>
      </section>

      <footer className="footer">
        <div className="container footer-content">
          <div className="footer-logo">
            <div className="footer-logo-icon-wrapper">
              <TrendingUp className="footer-logo-icon" />
            </div>
            <span style={{fontWeight: 600}}>Finora</span>
          </div>
          <p className="footer-text">
            © 2025 Finora. AI-powered wealth planning for everyone.
          </p>
        </div>
      </footer>
    </div>
  );
}
--- File: ./frontend/src/components/ChatPage.css ---
.chat-page-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  background-color: #f9fafb; /* bg-gray-50 */
}

.chat-window {
  flex-grow: 1;
  overflow-y: auto;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.chat-bubble {
  padding: 0.75rem 1rem;
  border-radius: 1rem; /* rounded-lg */
  max-width: 75%;
  line-height: 1.5;
}

.user-bubble {
  background-image: linear-gradient(to right, #2563eb, #9333ea);
  color: white;
  align-self: flex-end;
  border-bottom-right-radius: 0.25rem;
}

.bot-bubble {
  background-color: #e5e7eb; /* bg-gray-200 */
  color: #1f2937; /* text-gray-800 */
  align-self: flex-start;
  border-bottom-left-radius: 0.25rem;
}

.bot-bubble.loading-bubble {
    color: #6b7280;
    font-style: italic;
}

.chat-input-area {
  padding: 1rem 1.5rem;
  border-top: 1px solid var(--border);
  background-color: white;
}

.chat-input-form {
  display: flex;
  gap: 0.75rem;
  align-items: center;
}

.chat-input-form .input {
    flex-grow: 1;
}

.bot-bubble ul, .bot-bubble ol {
    padding-left: 1.25rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
}

.bot-bubble li {
    margin-bottom: 0.25rem;
}

.bot-bubble p:first-of-type {
    margin-top: 0;
}
.bot-bubble p:last-of-type {
    margin-bottom: 0;
}

--- File: ./frontend/src/components/AppHeader.tsx ---
import { Button } from "./ui/button.tsx";
import { MessageSquareMore, RefreshCw, BarChart3 } from "lucide-react";
import './AppHeader.css';

interface AppHeaderProps {
  isLoggedIn: boolean;
  onGoHome: () => void;
  onNavigateToMarket: () => void;
  onNavigateToChat: () => void;
  onGetStarted: () => void;
  onGoToDashboard: () => void;
  onSkipToDashboard: () => void;
}

export function AppHeader({
  isLoggedIn,
  onGoHome,
  onNavigateToMarket,
  onNavigateToChat,
  onGetStarted,
  onGoToDashboard,
  onSkipToDashboard
}: AppHeaderProps) {

  return (
    <header className="app-header">
      <div className="header-container">
        <div className="header-logo" onClick={onGoHome}>
          <img src="/logo.png" alt="Finora Logo" style={{ height: '36px' }} />
        </div>
        <div className="header-actions">
          <Button variant="ghost" onClick={onNavigateToMarket}><BarChart3 style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} /> Market Data</Button>
          <Button variant="ghost" onClick={onNavigateToChat}>
            <MessageSquareMore style={{ width: '1rem', height: '1rem', marginRight: '0.5rem' }} />
            Chat with AI
          </Button>
          
          {isLoggedIn ? (
            <Button variant="ghost" onClick={onGoToDashboard}>Dashboard</Button>
          ) : (
            <>
              {/* Dev button is kept as 'outline' to distinguish it */}
              <Button variant="outline" onClick={onSkipToDashboard}>Dev: Go to Dashboard</Button>
              <Button onClick={onGetStarted} className="get-started-btn">Get Started</Button>
            </>
          )}
        </div>
      </div>
    </header>
  );
}
--- File: ./frontend/src/components/Onboarding.tsx ---
import { useState } from "react";
import { Button } from "./ui/button.tsx";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card.tsx";
import { Input } from "./ui/input.tsx";
import { Label } from "./ui/label.tsx";
import { RadioGroup, RadioGroupItem } from "./ui/radio-group.tsx";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select.tsx";
import { Progress } from "./ui/progress.tsx";
import { ArrowLeft, ArrowRight } from "lucide-react";
import './Onboarding.css';

interface OnboardingProps {
  onComplete: (userData: UserData) => void;
  onBack: () => void;
}

export interface UserData {
  name: string;
  age: number;
  income: number;
  investmentAmount: number;
  timeHorizon: string;
  riskTolerance: string;
  investmentGoals: string[];
  experience: string;
}

const getIncomeRange = (income: number): string => {
    if (income < 50000) return "Less than $50,000";
    if (income >= 50000 && income < 100000) return "$50,000 - $99,999";
    if (income >= 100000 && income < 200000) return "$100,000 - $199,999";
    return "$200,000 or more";
};

export function Onboarding({ onComplete, onBack }: OnboardingProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [userData, setUserData] = useState<Partial<UserData>>({
    investmentGoals: []
  });

  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({});

  const totalSteps = 8;
  const progress = ((currentStep + 1) / totalSteps) * 100;
  
  const validateStep = (step: number): boolean => {
    const newErrors: { [key: string]: string } = {};
    let isValid = true;
    switch (step) {
      case 0:
        if (!userData.name || userData.name.trim().length < 2) {
          newErrors.name = "Please enter a valid name.";
          isValid = false;
        }
        break;
      case 1:
        if (!userData.age) {
          newErrors.age = "Age is required.";
          isValid = false;
        } else if (userData.age < 18 || userData.age > 100) {
          newErrors.age = "Please enter an age between 18 and 100.";
          isValid = false;
        }
        break;
      case 2:
        if (userData.income === undefined || userData.income === null) {
            newErrors.income = "Annual income is required.";
            isValid = false;
        } else if (userData.income < 0) {
            newErrors.income = "Income cannot be negative.";
            isValid = false;
        }
        break;
      case 3:
        if (!userData.investmentAmount) {
            newErrors.investmentAmount = "Investment amount is required.";
            isValid = false;
        } else if (userData.investmentAmount <= 0) {
            newErrors.investmentAmount = "Investment amount must be greater than zero.";
            isValid = false;
        }
        break;
      case 6:
        if (!userData.investmentGoals || userData.investmentGoals.length === 0) {
          newErrors.investmentGoals = "Please select at least one goal.";
          isValid = false;
        }
        break;
      case 7:
        if (!userData.experience) {
          newErrors.experience = "Please select your experience level.";
          isValid = false;
        }
        break;
    }
    setFormErrors(newErrors);
    return isValid;
  };

  const submitOnboardingData = async () => {
    setIsLoading(true);
    setApiError(null);

    const payload = {
      name: userData.name,
      age: userData.age,
      income_range: getIncomeRange(userData.income!),
      investment_amount: userData.investmentAmount,
      time_horizon: userData.timeHorizon,
      risk_tolerance: userData.riskTolerance,
      investment_goals: userData.investmentGoals?.join(', '),
      experience: userData.experience,
    };

    try {
      const response = await fetch('http://127.0.0.1:5000/onboard', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Something went wrong on the server.');
      }
      onComplete(userData as UserData);
    } catch (err: any) {
      console.error("Failed to submit onboarding data:", err);
      setApiError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      if (currentStep < totalSteps - 1) {
        setCurrentStep(currentStep + 1);
      } else {
        submitOnboardingData();
      }
    }
  };

  const handlePrevious = () => {
    setFormErrors({});
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    } else {
      onBack();
    }
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 0: return userData.name && userData.name.trim().length >= 2;
      case 1: return userData.age && userData.age >= 18 && userData.age <= 100;
      case 2: return userData.income !== undefined && userData.income >= 0;
      case 3: return userData.investmentAmount && userData.investmentAmount > 0;
      case 4: return !!userData.timeHorizon;
      case 5: return !!userData.riskTolerance;
      case 6: return userData.investmentGoals && userData.investmentGoals.length > 0;
      case 7: return !!userData.experience;
      default: return false;
    }
  };

  const updateGoals = (goal: string, checked: boolean) => {
    const currentGoals = userData.investmentGoals || [];
    if (checked) {
      setUserData({ ...userData, investmentGoals: [...currentGoals, goal] });
    } else {
      setUserData({ ...userData, investmentGoals: currentGoals.filter(g => g !== goal) });
    }
  };
  
  const stepTitles = [
    "Welcome to Finora!",
    "Let's start with the basics",
    "Tell us about your income",
    "How much to invest?",
    "What's your timeline?",
    "Risk assessment",
    "What are your investment goals?",
    "What's your investment experience?"
  ];

  const stepDescriptions = [
    "Let's get started by learning a bit about you.",
    "This helps us personalize your investment plan.",
    "This helps us recommend appropriate investment amounts.",
    "You can start with any amount you're comfortable with.",
    "Your investment timeline affects our recommendations.",
    "This helps us understand your comfort with market changes.",
    "Select all that apply to help us tailor your plan.",
    "This helps us adjust our guidance for you."
  ];

  const renderStep = () => (
    <div className="step-container">
      {(() => {
        switch (currentStep) {
          case 0:
            return (
              <div className="step-content">
                <Label htmlFor="name" className="input-label">What is your full name?</Label>
                <Input
                  id="name"
                  type="text"
                  placeholder="Enter your name"
                  value={userData.name || ''}
                  onChange={(e) => setUserData({ ...userData, name: e.target.value })}
                  className="input-field"
                />
                {formErrors.name && <p className="error-text">{formErrors.name}</p>}
                <p className="helper-text"> We'll use this to personalize your experience.</p>
              </div>
            );
          case 1:
            return (
              <div className="step-content">
                <Label htmlFor="age" className="input-label">How old are you, {userData.name || 'there'}?</Label>
                <Input
                  id="age"
                  type="number"
                  placeholder="Enter your age"
                  value={userData.age || ''}
                  onChange={(e) => setUserData({ ...userData, age: parseInt(e.target.value) || undefined })}
                  className="input-field"
                />
                {formErrors.age && <p className="error-text">{formErrors.age}</p>}
                <p className="helper-text">Please enter an age between 18 and 100.</p>
              </div>
            );
          case 2:
            return (
                <div className="step-content">
                <Label htmlFor="income" className="input-label">What's your approximate annual income?</Label>
                <Input
                  id="income"
                  type="number"
                  placeholder="e.g., 75000"
                  value={userData.income || ''}
                  onChange={(e) => setUserData({ ...userData, income: parseInt(e.target.value) || undefined })}
                  className="input-field"
                />
                {formErrors.income && <p className="error-text">{formErrors.income}</p>}
                <p className="helper-text">Please enter a non-negative value. We store this as a range to protect your privacy.</p>
              </div>
            );
          case 3:
            return (
              <div className="step-content">
                <Label htmlFor="investment" className="input-label">How much would you like to invest initially?</Label>
                <Input
                  id="investment"
                  type="number"
                  placeholder="e.g., 1000"
                  value={userData.investmentAmount || ''}
                  onChange={(e) => setUserData({ ...userData, investmentAmount: parseInt(e.target.value) || undefined })}
                  className="input-field"
                />
                {formErrors.investmentAmount && <p className="error-text">{formErrors.investmentAmount}</p>}
                <p className="helper-text">Start with any amount greater than zero.</p>
              </div>
            );
          case 4:
            return (
              <div className="step-content">
                <Label className="input-label">What's your investment timeline?</Label>
                <Select value={userData.timeHorizon} onValueChange={(value) => setUserData({ ...userData, timeHorizon: value })}>
                  <SelectTrigger className="select-trigger">
                    <SelectValue placeholder="Select your investment timeline" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="short">Short-term (1-3 years)</SelectItem>
                    <SelectItem value="medium">Medium-term (3-10 years)</SelectItem>
                    <SelectItem value="long">Long-term (10+ years)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            );
          case 5:
            return (
              <div className="step-content">
                <Label className="input-label">How do you feel about investment risk?</Label>
                <RadioGroup
                  value={userData.riskTolerance}
                  onValueChange={(value) => setUserData({ ...userData, riskTolerance: value })}
                  className="radio-group risk-group"
                >
                  <div className="radio-item-container">
                    <RadioGroupItem value="conservative" id="conservative" />
                    <Label htmlFor="conservative" className="radio-label">
                      <div className="radio-label-title">Conservative</div>
                      <div className="radio-label-description">I prefer steady, predictable returns with minimal risk</div>
                    </Label>
                  </div>
                  <div className="radio-item-container">
                    <RadioGroupItem value="moderate" id="moderate" />
                    <Label htmlFor="moderate" className="radio-label">
                      <div className="radio-label-title">Moderate</div>
                      <div className="radio-label-description">I'm comfortable with some ups and downs for potentially higher returns</div>
                    </Label>
                  </div>
                  <div className="radio-item-container">
                    <RadioGroupItem value="aggressive" id="aggressive" />
                    <Label htmlFor="aggressive" className="radio-label">
                      <div className="radio-label-title">Aggressive</div>
                      <div className="radio-label-description">I'm willing to accept significant volatility for maximum growth potential</div>
                    </Label>
                  </div>
                </RadioGroup>
              </div>
            );
          case 6:
            return (
              <div className="step-content">
                <div className="goals-grid">
                  {[
                    'Retirement planning',
                    'Emergency fund',
                    'Buying a home',
                    'Education funding',
                    'General wealth building',
                    'Short-term savings goals'
                  ].map((goal) => (
                    <label key={goal} className="goal-label">
                      <input
                        type="checkbox"
                        checked={userData.investmentGoals?.includes(goal) || false}
                        onChange={(e) => updateGoals(goal, e.target.checked)}
                        className="goal-checkbox"
                      />
                      <span>{goal}</span>
                    </label>
                  ))}
                </div>
                {formErrors.investmentGoals && <p className="error-text">{formErrors.investmentGoals}</p>}
              </div>
            );
          case 7:
            return (
              <div className="step-content">
                <Select value={userData.experience} onValueChange={(value) => setUserData({ ...userData, experience: value })}>
                  <SelectTrigger className="select-trigger">
                    <SelectValue placeholder="Select your experience level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="beginner">Beginner - I'm new to investing</SelectItem>
                    <SelectItem value="intermediate">Intermediate - I have some experience</SelectItem>
                    <SelectItem value="advanced">Advanced - I'm an experienced investor</SelectItem>
                  </SelectContent>
                </Select>
                {formErrors.experience && <p className="error-text">{formErrors.experience}</p>}
              </div>
            );
          default:
            return null;
        }
      })()}
    </div>
  );

  return (
    <div className="onboarding-container">
      <Card className="onboarding-card">
        <CardHeader>
            <div style={{display: 'flex', flexDirection: 'column', gap: '1rem'}}>
                <Progress value={progress} className="progress-bar" />
                <div className="onboarding-header">
                    <CardTitle>{stepTitles[currentStep]}</CardTitle>
                    <CardDescription style={{marginTop: '0.5rem'}}>
                        {stepDescriptions[currentStep]}
                    </CardDescription>
                </div>
            </div>
        </CardHeader>
        <CardContent style={{display: 'flex', flexDirection: 'column', gap: '1.5rem'}}>
          {renderStep()}
          {apiError && (
            <div className="error-text" style={{textAlign: 'center'}}>
              API Error: {apiError}
            </div>
          )}
          <div className="onboarding-footer">
            <Button
              variant="outline"
              onClick={handlePrevious}
              className="nav-button"
              disabled={isLoading}
            >
              <ArrowLeft className="arrow-icon" />
              <span>Back</span>
            </Button>
            <Button
              onClick={handleNext}
              disabled={!isStepValid() || isLoading}
              className="nav-button nav-button-next"
            >
              <span>
                {isLoading 
                  ? 'Saving...' 
                  : currentStep === totalSteps - 1 
                  ? 'Generate My Plan' 
                  : 'Next'}
              </span>
              <ArrowRight className="arrow-icon" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
--- File: ./frontend/src/components/MarketDataPage.css ---
/* Styles for the loading indicator */
.loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 300px;
    font-size: 1.125rem;
    color: var(--muted-foreground);
}

.error-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 300px;
    font-size: 1.125rem;
    color: var(--destructive);
    padding: 2rem;
    background-color: #fee2e2;
    border: 1px solid var(--destructive);
    border-radius: var(--radius);
}

/* Container for the search input */
.toolbar-container {
    margin-bottom: 1.5rem;
}

/* Style for the sortable table headers */
.sortable-header {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    font: inherit;
    color: inherit;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
}

.sortable-header:hover {
    color: var(--foreground); /* Make it slightly darker on hover */
}

/* A subtle indicator for the sort direction arrow */
.sort-indicator {
    font-size: 0.7rem;
}
--- File: ./frontend/src/components/HistoricalChart.tsx ---
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

interface ChartDataPoint {
  date: string;
  close_price: number;
}

interface HistoricalChartProps {
  data: ChartDataPoint[];
}

export function HistoricalChart({ data }: HistoricalChartProps) {
  if (!data || data.length === 0) {
    return <div>No historical data available.</div>;
  }

  // Format the data for the chart
  const chartData = data.map(item => ({
    date: new Date(item.date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
    price: item.close_price,
  }));

  return (
    <div style={{ width: '100%', height: 200, marginTop: '1rem' }}>
      <ResponsiveContainer>
        <LineChart
          data={chartData}
          margin={{
            top: 5,
            right: 20,
            left: -10,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
          <XAxis dataKey="date" fontSize={12} tickLine={false} axisLine={false} />
          <YAxis fontSize={12} tickLine={false} axisLine={false} domain={['dataMin', 'dataMax']} />
          <Tooltip 
            contentStyle={{
              borderRadius: '0.5rem',
              border: '1px solid #e0e0e0',
              fontSize: '12px',
            }}
            formatter={(value: number) => [`$${value.toFixed(2)}`, 'Price']}
            labelFormatter={(label) => new Date(label).toLocaleDateString('en-US')}
          />
          <Line type="monotone" dataKey="price" stroke="#8884d8" strokeWidth={2} dot={false} />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
}
--- File: ./frontend/src/components/MarketDataPage.tsx ---
import { useMemo, useState } from "react";
import { Input } from "./ui/input.tsx";
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from "./ui/table.tsx";
import './Dashboard.css';
import './MarketDataPage.css';

export interface ETFData {
  symbol: string;
  name: string;
  price: number;
  ytd_return: number;
  expense_ratio: number;
  one_year_return: number;
  volatility: number;
  sharpe_ratio: number;
}

// The props are now simpler, only receiving the data to display
interface MarketDataPageProps {
  etfs: ETFData[];
  isLoading: boolean;
  error: string | null;
}

export function MarketDataPage({ etfs, isLoading, error }: MarketDataPageProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortConfig, setSortConfig] = useState<{ key: keyof ETFData; direction: 'ascending' | 'descending' } | null>({
    key: 'symbol',
    direction: 'ascending',
  });

  const filteredAndSortedEtfs = useMemo(() => {
    let sortableEtfs = [...etfs];
    if (searchTerm) {
      sortableEtfs = sortableEtfs.filter(etf =>
        etf.symbol.toLowerCase().includes(searchTerm.toLowerCase()) ||
        etf.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    if (sortConfig !== null) {
      sortableEtfs.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'ascending' ? -1 : 1;
        if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'ascending' ? 1 : -1;
        return 0;
      });
    }
    return sortableEtfs;
  }, [etfs, searchTerm, sortConfig]);
  
  const requestSort = (key: keyof ETFData) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };
  
  const getSortIndicator = (key: keyof ETFData) => {
      if (!sortConfig || sortConfig.key !== key) return null;
      return sortConfig.direction === 'ascending' ? '▲' : '▼';
  };

  const renderContent = () => {
    if (isLoading && etfs.length === 0) {
      return <div className="loading-container">Fetching Live Market Data...</div>;
    }
    if (error) {
      return <div className="error-container">{error}</div>;
    }
    return (
      <>
        <div className="toolbar-container">
            <Input 
                type="text"
                placeholder="Search by symbol or name..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{ maxWidth: '400px' }}
            />
        </div>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>
                <button onClick={() => requestSort('symbol')} className="sortable-header" title="The stock market symbol for the ETF">
                  Symbol <span className="sort-indicator">{getSortIndicator('symbol')}</span>
                </button>
              </TableHead>
              <TableHead>
                <button onClick={() => requestSort('name')} className="sortable-header" title="The full name of the Exchange-Traded Fund">
                  Name <span className="sort-indicator">{getSortIndicator('name')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('price')} className="sortable-header" title="The most recent trading price">
                  Price <span className="sort-indicator">{getSortIndicator('price')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('ytd_return')} className="sortable-header" title="The investment return from the start of the current year to today">
                  YTD % <span className="sort-indicator">{getSortIndicator('ytd_return')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('one_year_return')} className="sortable-header" title="The total investment return over the last 365 days">
                  1-Yr Return % <span className="sort-indicator">{getSortIndicator('one_year_return')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('volatility')} className="sortable-header" title="A measure of risk; how much the daily price swings. Higher is riskier.">
                  Volatility % <span className="sort-indicator">{getSortIndicator('volatility')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('sharpe_ratio')} className="sortable-header" title="Measures return compared to risk. A higher number (e.g., >1) is generally better.">
                  Sharpe Ratio <span className="sort-indicator">{getSortIndicator('sharpe_ratio')}</span>
                </button>
              </TableHead>
              <TableHead style={{ textAlign: 'right' }}>
                <button onClick={() => requestSort('expense_ratio')} className="sortable-header" title="The annual fee charged by the fund, expressed as a percentage.">
                  Expense Ratio % <span className="sort-indicator">{getSortIndicator('expense_ratio')}</span>
                </button>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredAndSortedEtfs.map((etf) => (
              <TableRow key={etf.symbol}>
                <TableCell style={{ fontWeight: 500 }}>{etf.symbol}</TableCell>
                <TableCell>{etf.name}</TableCell>
                <TableCell style={{ textAlign: 'right' }}>${etf.price.toFixed(2)}</TableCell>
                <TableCell 
                  className={etf.ytd_return >= 0 ? 'positive-return' : 'negative-return'} 
                  style={{ textAlign: 'right' }}
                >
                  {etf.ytd_return.toFixed(2)}%
                </TableCell>
                <TableCell 
                  className={etf.one_year_return >= 0 ? 'positive-return' : 'negative-return'} 
                  style={{ textAlign: 'right' }}
                >
                  {etf.one_year_return.toFixed(2)}%
                </TableCell>
                <TableCell style={{ textAlign: 'right' }}>{etf.volatility.toFixed(2)}%</TableCell>
                <TableCell style={{ textAlign: 'right' }}>{etf.sharpe_ratio.toFixed(2)}</TableCell>
                <TableCell style={{ textAlign: 'right' }}>{etf.expense_ratio.toFixed(2)}%</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </>
    );
  };

  return (
    <div className="dashboard-page">
      {/* The old <header> is GONE */}
      <div className="container dashboard-body">
        <div className="welcome-section">
          <h1 className="welcome-title">Live US ETF Market Data</h1>
          <p className="welcome-subtitle">Key metrics calculated from historical and live market data.</p>
        </div>
        {renderContent()}
      </div>
    </div>
  );
}
--- File: ./frontend/src/components/Onboarding.css ---
.onboarding-container {
  min-height: 100vh;
  background-image: linear-gradient(to bottom right, #eff6ff, white, #faf5ff);
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
}

.onboarding-card {
  width: 100%;
  max-width: 42rem; /* max-w-2xl */
}

.progress-bar {
  width: 100%;
}

.onboarding-header {
  text-align: center;
}

/* NEW: This container enforces a consistent height for each step */
.step-container {
  min-height: 280px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.step-content {
  display: flex;
  flex-direction: column;
  gap: 0.75rem; /* Reduced gap since the label has margin now */
}

.input-label {
  display: block; /* Ensures it takes its own line */
  margin-bottom: 0.75rem; /* Adds space below the question */
  font-weight: 500;
  font-size: 1rem; /* Slightly larger question text */
}

/* NEW: Consistent styling for all answer areas */
.input-field,
.select-trigger {
  width: 100%;
  max-width: 400px; /* Prevents fields from being too wide */
}

.helper-text {
  font-size: 0.875rem; /* text-sm */
  color: #4b5563; /* text-gray-600 */
  margin-top: 0.5rem;
  max-width: 400px;
}

/* --- Radio Group and Checkbox Styling --- */
.radio-group,
.goals-grid {
  display: flex;
  flex-direction: column;
  gap: 1rem; /* Increased base gap */
}

/* NEW: Increased spacing for risk tolerance options */
.risk-group {
    gap: 1.5rem;
}

.radio-item-container,
.goal-label {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  padding: 0.75rem;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  transition: background-color 0.2s;
}

.radio-item-container:has([data-state="checked"]),
.goal-label:has(input:checked) {
    background-color: #eff6ff;
    border-color: #3b82f6;
}

.radio-label {
    flex: 1;
}

.radio-label-title {
    font-weight: 500;
}

.radio-label-description {
    font-size: 0.875rem;
    color: #4b5563;
}

.goal-checkbox {
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
    border-color: #d1d5db;
}


/* --- Footer and Error Styling --- */
.onboarding-footer {
  display: flex;
  justify-content: space-between;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border);
}

.nav-button {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.nav-button-next {
    background-image: linear-gradient(to right, #2563eb, #9333ea);
}
.nav-button-next:hover {
    background-image: linear-gradient(to right, #1d4ed8, #7e22ce);
}
.nav-button-next:disabled {
    background-image: none;
    opacity: 0.5;
    cursor: not-allowed;
}

.arrow-icon {
  width: 1rem;
  height: 1rem;
}

.error-text {
  color: #dc2626; /* red-600 */
  font-size: 0.875rem; /* text-sm */
  margin-top: 0.5rem;
}
--- File: ./frontend/src/components/ChatPage.tsx ---
import { useState, useRef, useEffect } from 'react';
import { Button } from "./ui/button.tsx";
import { Input } from "./ui/input.tsx";
import { Send } from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import './Dashboard.css';
import './ChatPage.css';

interface Message {
  sender: 'user' | 'bot';
  text: string;
}

// The component no longer needs any props
export function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([
    { sender: 'bot', text: "Hello! I'm Finora, your AI financial advisor. How can I help you today?" }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    const userMessage = inputValue.trim();
    if (!userMessage || isLoading) return;

    setMessages(prev => [...prev, { sender: 'user', text: userMessage }]);
    setInputValue('');
    setIsLoading(true);

    try {
      const response = await fetch('http://127.0.0.1:5000/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMessage }),
      });

      if (!response.ok) {
        throw new Error('Failed to get a response from the server.');
      }

      const data = await response.json();
      setMessages(prev => [...prev, { sender: 'bot', text: data.reply }]);

    } catch (error) {
      console.error("Chat API error:", error);
      setMessages(prev => [...prev, { sender: 'bot', text: "Sorry, I'm having trouble connecting. Please try again later." }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="chat-page-container">
      {/* The old <header> section is GONE */}

      <div className="chat-window">
        {messages.map((msg, index) => (
          <div key={index} className={`chat-bubble ${msg.sender === 'user' ? 'user-bubble' : 'bot-bubble'}`}>
            <ReactMarkdown>{msg.text}</ReactMarkdown>
          </div>
        ))}
        {isLoading && (
            <div className="chat-bubble bot-bubble loading-bubble">
                Finora is thinking...
            </div>
        )}
        <div ref={chatEndRef} />
      </div>

      <div className="chat-input-area">
        <form onSubmit={handleSendMessage} className="chat-input-form">
          <Input
            type="text"
            placeholder="Ask about ETFs, risk, or your portfolio..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            disabled={isLoading}
          />
          <Button type="submit" disabled={isLoading || !inputValue.trim()}>
            <Send style={{ width: '1rem', height: '1rem' }} />
          </Button>
        </form>
      </div>
    </div>
  );
}
--- File: ./frontend/src/components/AppHeader.css ---
.app-header {
  border-bottom: 1px solid var(--border);
  background-color: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(4px);
  position: sticky;
  top: 0;
  z-index: 50;
  padding: 0.75rem 0;
}

.header-container {
  max-width: 1280px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.header-logo {
  cursor: pointer;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}